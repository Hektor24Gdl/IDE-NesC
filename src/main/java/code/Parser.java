
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 03 17:01:19 CST 2014
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java.io.FileReader;
import code.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 03 17:01:19 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\002" +
    "\000\002\006\005\000\002\007\003\000\002\007\005\000" +
    "\002\010\010\000\002\023\006\000\002\024\004\000\002" +
    "\024\002\000\002\025\003\000\002\025\003\000\002\026" +
    "\006\000\002\026\006\000\002\027\005\000\002\027\003" +
    "\000\002\030\003\000\002\030\005\000\002\031\005\000" +
    "\002\032\005\000\002\032\003\000\002\033\003\000\002" +
    "\033\005\000\002\011\004\000\002\011\002\000\002\012" +
    "\003\000\002\012\003\000\002\013\004\000\002\014\004" +
    "\000\002\015\003\000\002\015\005\000\002\016\004\000" +
    "\002\016\003\000\002\017\004\000\002\017\005\000\002" +
    "\020\003\000\002\020\005\000\002\021\004\000\002\022" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\004\ufffc\005\ufffc\001\002\000\004\002" +
    "\113\001\002\000\004\002\000\001\002\000\004\005\017" +
    "\001\002\000\006\004\010\005\ufffe\001\002\000\004\142" +
    "\012\001\002\000\006\004\ufffd\005\ufffd\001\002\000\006" +
    "\015\ufffa\022\ufffa\001\002\000\006\015\015\022\014\001" +
    "\002\000\004\142\016\001\002\000\006\004\ufffb\005\ufffb" +
    "\001\002\000\006\015\ufff9\022\ufff9\001\002\000\004\142" +
    "\021\001\002\000\004\002\uffff\001\002\000\004\020\022" +
    "\001\002\000\010\006\uffe6\007\uffe6\021\uffe6\001\002\000" +
    "\010\006\025\007\030\021\027\001\002\000\010\006\uffe7" +
    "\007\uffe7\021\uffe7\001\002\000\006\010\032\020\033\001" +
    "\002\000\010\006\uffe5\007\uffe5\021\uffe5\001\002\000\004" +
    "\011\054\001\002\000\006\010\032\020\033\001\002\000" +
    "\010\006\uffe4\007\uffe4\021\uffe4\001\002\000\004\142\053" +
    "\001\002\000\004\010\032\001\002\000\006\015\042\024" +
    "\044\001\002\000\010\006\uffe1\007\uffe1\021\uffe1\001\002" +
    "\000\010\006\uffe3\007\uffe3\021\uffe3\001\002\000\010\014" +
    "\040\015\uffdb\024\uffdb\001\002\000\004\142\041\001\002" +
    "\000\006\015\uffda\024\uffda\001\002\000\012\006\uffdd\007" +
    "\uffdd\010\uffdd\021\uffdd\001\002\000\004\015\046\001\002" +
    "\000\004\141\045\001\002\000\004\015\uffd8\001\002\000" +
    "\012\006\uffdc\007\uffdc\010\uffdc\021\uffdc\001\002\000\006" +
    "\010\uffde\021\uffde\001\002\000\006\010\032\021\052\001" +
    "\002\000\006\010\uffdf\021\uffdf\001\002\000\010\006\uffe0" +
    "\007\uffe0\021\uffe0\001\002\000\010\014\uffd9\015\uffd9\024" +
    "\uffd9\001\002\000\004\020\056\001\002\000\004\002\ufff8" +
    "\001\002\000\010\013\ufff5\021\ufff5\142\ufff5\001\002\000" +
    "\010\013\061\021\064\142\065\001\002\000\012\015\uffef" +
    "\023\uffef\135\uffef\137\uffef\001\002\000\004\142\103\001" +
    "\002\000\010\013\ufff3\021\ufff3\142\ufff3\001\002\000\010" +
    "\013\ufff4\021\ufff4\142\ufff4\001\002\000\004\002\ufff7\001" +
    "\002\000\014\015\uffee\023\uffee\024\100\135\uffee\137\uffee" +
    "\001\002\000\010\013\ufff6\021\ufff6\142\ufff6\001\002\000" +
    "\010\023\072\135\071\137\070\001\002\000\004\142\065" +
    "\001\002\000\004\142\065\001\002\000\004\142\065\001" +
    "\002\000\012\015\ufff0\023\ufff0\135\ufff0\137\ufff0\001\002" +
    "\000\006\015\075\023\072\001\002\000\010\013\ufff1\021" +
    "\ufff1\142\ufff1\001\002\000\006\015\077\023\072\001\002" +
    "\000\010\013\ufff2\021\ufff2\142\ufff2\001\002\000\004\141" +
    "\101\001\002\000\012\015\uffed\023\uffed\135\uffed\137\uffed" +
    "\001\002\000\006\015\110\022\107\001\002\000\010\014" +
    "\105\015\uffe9\022\uffe9\001\002\000\006\015\uffea\022\uffea" +
    "\001\002\000\004\142\106\001\002\000\006\015\uffe8\022" +
    "\uffe8\001\002\000\004\142\103\001\002\000\010\013\uffec" +
    "\021\uffec\142\uffec\001\002\000\006\015\uffeb\022\uffeb\001" +
    "\002\000\010\006\uffe2\007\uffe2\021\uffe2\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\012\002\003\003\004\004\005\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\017" +
    "\001\001\000\004\006\010\001\001\000\004\007\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\022\001\001\000\010\012\023\013\025\014\030\001" +
    "\001\000\002\001\001\000\012\015\111\017\034\020\033" +
    "\021\036\001\001\000\002\001\001\000\004\023\054\001" +
    "\001\000\012\015\035\017\034\020\033\021\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\047\017" +
    "\046\020\033\021\036\001\001\000\004\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\050\020\033\021\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\056" +
    "\001\001\000\014\025\065\026\062\027\066\030\057\031" +
    "\061\001\001\000\002\001\001\000\006\032\101\033\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\075\030\057\001\001\000\006\027\073\030" +
    "\057\001\001\000\004\030\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    private Component component;
    private ParserError error = new ParserError();

    public ParserError getError(){
        return error;
    }
    public void setComponent(Component component) {
        this.component = component;
    }
    
    public Component getComponent() {
        return component;
    }
     /* Change the method report_error so it will display the line
     * and column of where the error occurred in the input as well
     * as the reason for the error which is passed into the method
     * in the String 'message'.  */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same type
         * as the type java_cup.runtime.Symbol.  */ 
        if (info instanceof java_cup.runtime.Symbol) {

            /* Declare a java_cup.runtime.Symbol object 's' with the
             * information in the object info that is being typecasted
             * as a java_cup.runtime.Symbol object.  */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
             * equal to zero.  */
            if (s.left >= 0) {

                /* Add to the end of the StringBuffer error message the
                 * line number of the error in the input. */
                m.append(" in line " + (s.left + 1));
		error.setLine(s.left + 1);

                /* Check if the column number in the input is greater
                 * or equal to zero */
                if (s.right >= 0) {

                    /* Add to the end of the StringBuffer error message
                     * the column number of the error in the input.  */
                    m.append(", column " + (s.right + 1));
		    error.setColumn(s.right + 1);
                }
            }
        }
	error.setMessage(message);
        /* Add to the end of the StringBuffer error message created in this
           method the message that was passed into this method. */
        m.append(" : " + message);

        /* Print the contents of the StringBuffer 'm', which contains an
         * error message out on a line. */
        //System.err.println(m);
    }


    /* Change the method report_fatal_error so when it reports a fatal
     * error it will display the line and column number of where the fatal
     * error occurred in the input as well as the reason for the fatal
     * error which is passed into the method in the object 'message' and
     * then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
throw new Error("Parser Error");
        //System.exit(1);
    }
 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters ::= OPEN_BRACE CLOSE_BRACE 
            {
              java.lang.String RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String content = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = content;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // interfaceType ::= INTERFACE IDENTIFIER 
            {
              java.lang.String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = i;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaceType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // interfaceRef ::= interfaceType AS IDENTIFIER 
            {
              InterfaceRef RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String type = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new InterfaceRef(type, i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaceRef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // interfaceRef ::= interfaceType 
            {
              InterfaceRef RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String type = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new InterfaceRef(type);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaceRef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameterisedInterface ::= interfaceRef parameters SEMI_COLON 
            {
              ParameterisedInterface RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InterfaceRef ref = (InterfaceRef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String p = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ParameterisedInterface(ref, p);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterface",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameterisedInterface ::= interfaceRef SEMI_COLON 
            {
              ParameterisedInterface RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InterfaceRef ref = (InterfaceRef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ParameterisedInterface(ref);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterface",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameterisedInterfaces ::= parameterisedInterface 
            {
              ParameterisedInterfaces RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterface pi = (ParameterisedInterface)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ParameterisedInterfaces(pi);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterfaces",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameterisedInterfaces ::= parameterisedInterfaces parameterisedInterface 
            {
              ParameterisedInterfaces RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterisedInterfaces pis = (ParameterisedInterfaces)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterface pi = (ParameterisedInterface)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ParameterisedInterfaces(pis, pi);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterfaces",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameterisedInterfaceList ::= OPEN_CURLY parameterisedInterfaces CLOSE_CURLY 
            {
              ParameterisedInterfaceList RESULT =null;
		int pisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterisedInterfaces pis = (ParameterisedInterfaces)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ParameterisedInterfaceList(pis);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterfaceList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameterisedInterfaceList ::= parameterisedInterface 
            {
              ParameterisedInterfaceList RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterface pi = (ParameterisedInterface)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ParameterisedInterfaceList(pi);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedInterfaceList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // provides ::= PROVIDES parameterisedInterfaceList 
            {
              ParameterisedInterfaceList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterfaceList list = (ParameterisedInterfaceList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("provides",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // requires ::= USES parameterisedInterfaceList 
            {
              ParameterisedInterfaceList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterfaceList list = (ParameterisedInterfaceList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requires",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // requiresOrProvides ::= provides 
            {
              RequiresOrProvides RESULT =null;
		int provleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int provright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterfaceList prov = (ParameterisedInterfaceList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new RequiresOrProvides(false, prov);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requiresOrProvides",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // requiresOrProvides ::= requires 
            {
              RequiresOrProvides RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedInterfaceList req = (ParameterisedInterfaceList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new RequiresOrProvides(true, req);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requiresOrProvides",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // requiresOrProvidesList ::= 
            {
              RequiresOrProvidesList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requiresOrProvidesList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // requiresOrProvidesList ::= requiresOrProvidesList requiresOrProvides 
            {
              RequiresOrProvidesList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RequiresOrProvidesList list = (RequiresOrProvidesList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int reqOrProvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reqOrProvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RequiresOrProvides reqOrProv = (RequiresOrProvides)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new RequiresOrProvidesList(list, reqOrProv);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requiresOrProvidesList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // componentRef ::= IDENTIFIER AS IDENTIFIER 
            {
              ComponentRef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int renameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int renameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String rename = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ComponentRef(id, rename);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentRef",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // componentRef ::= IDENTIFIER 
            {
              ComponentRef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ComponentRef(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentRef",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // componentList ::= componentRef 
            {
              ComponentList RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentRef ref = (ComponentRef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ComponentList(ref);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // componentList ::= componentList COMMA componentRef 
            {
              ComponentList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComponentList list = (ComponentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentRef ref = (ComponentRef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ComponentList(list, ref);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuses ::= COMPONENTS componentList SEMI_COLON 
            {
              Cuses RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComponentList list = (ComponentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Cuses(list);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuses",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameterisedIdentifier ::= IDENTIFIER OPEN_BRACE CLOSE_BRACE 
            {
              ParameterisedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String parms = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ParameterisedIdentifier(id, parms);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedIdentifier",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameterisedIdentifier ::= IDENTIFIER 
            {
              ParameterisedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ParameterisedIdentifier(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterisedIdentifier",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // endpoint ::= parameterisedIdentifier 
            {
              Endpoint RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedIdentifier id = (ParameterisedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Endpoint(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endpoint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // endpoint ::= endpoint DOT parameterisedIdentifier 
            {
              Endpoint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Endpoint e = (Endpoint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterisedIdentifier id = (ParameterisedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Endpoint(e, id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endpoint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // connection ::= endpoint WIRES_TO endpoint SEMI_COLON 
            {
              Connection RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Endpoint left = (Endpoint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int connTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int connTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String connType = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Endpoint right = (Endpoint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Connection(left, connType, right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("connection",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // connection ::= endpoint EQUALS endpoint SEMI_COLON 
            {
              Connection RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Endpoint left = (Endpoint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int connTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int connTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String connType = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Endpoint right = (Endpoint)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Connection(left, connType, right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("connection",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // configurationDecl ::= cuses 
            {
              ConfigurationDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cuses c = (Cuses)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ConfigurationDecl(c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configurationDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // configurationDecl ::= connection 
            {
              ConfigurationDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Connection c = (Connection)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ConfigurationDecl(c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configurationDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // configurationDecls ::= 
            {
              ConfigurationDecls RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configurationDecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // configurationDecls ::= configurationDecls configurationDecl 
            {
              ConfigurationDecls RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConfigurationDecls cds = (ConfigurationDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConfigurationDecl cd = (ConfigurationDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ConfigurationDecls(cds, cd);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configurationDecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iconfiguration ::= IMPLEMENTATION OPEN_CURLY configurationDecls CLOSE_CURLY 
            {
              IConfiguration RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConfigurationDecls cds = (ConfigurationDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new IConfiguration(cds);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iconfiguration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // configuration ::= CONFIGURATION IDENTIFIER OPEN_CURLY requiresOrProvidesList CLOSE_CURLY iconfiguration 
            {
              Configuration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		RequiresOrProvidesList list = (RequiresOrProvidesList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iconfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iconfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IConfiguration iconf = (IConfiguration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Configuration(i, list, iconf);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configuration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // includeList ::= includeList COMMA IDENTIFIER 
            {
              IncludeList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IncludeList list = (IncludeList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IncludeList(list, i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includeList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // includeList ::= IDENTIFIER 
            {
              IncludeList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IncludeList(i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includeList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // includes ::= INCLUDES includeList SEMI_COLON 
            {
              Includes RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IncludeList list = (IncludeList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Includes(list);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includes",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // includesList ::= 
            {
              IncludesList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includesList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // includesList ::= includesList includes 
            {
              IncludesList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IncludesList list = (IncludesList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Includes i = (Includes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = new IncludesList(list, i);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includesList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ncHeader ::= includesList 
            {
              NcHeader RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IncludesList list = (IncludesList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = new NcHeader(list);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ncHeader",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // component ::= ncHeader configuration 
            {
              Component RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NcHeader h = (NcHeader)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Configuration c = (Configuration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Component(h, c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dispatch ::= component 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        parser.setComponent(c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dispatch",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dispatch EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

