/* The following code was generated by JFlex 1.6.0 */


/* --------------------------Codigo de Usuario----------------------- */
package code;

import java_cup.runtime.*;
import java.io.Reader;
import java_cup.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/main/java/generator/lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int BRACE = 4;
  public static final int PREPROCESSOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\5\1\2\1\3\1\3\1\1\16\15\4\0\1\5\1\100"+
    "\1\27\1\36\1\14\1\77\1\101\1\26\1\72\1\73\1\7\1\11"+
    "\1\76\1\65\1\12\1\6\1\16\1\61\1\64\1\63\2\16\1\62"+
    "\1\16\1\57\1\10\1\104\1\71\1\67\1\70\1\66\1\30\1\0"+
    "\4\22\1\13\1\22\5\14\1\34\10\14\1\25\5\14\1\35\1\23"+
    "\1\106\1\103\1\60\1\0\1\51\1\32\1\40\1\17\1\42\1\52"+
    "\1\21\1\54\1\20\1\14\1\55\1\41\1\50\1\37\1\46\1\44"+
    "\1\14\1\45\1\43\1\31\1\24\1\47\1\53\1\33\1\56\1\14"+
    "\1\74\1\102\1\75\1\105\6\15\1\4\32\15\2\0\4\14\4\0"+
    "\1\14\2\0\1\15\7\0\1\14\4\0\1\14\5\0\27\14\1\0"+
    "\37\14\1\0\u01ca\14\4\0\14\14\16\0\5\14\7\0\1\14\1\0"+
    "\1\14\21\0\160\15\5\14\1\0\2\14\2\0\4\14\10\0\1\14"+
    "\1\0\3\14\1\0\1\14\1\0\24\14\1\0\123\14\1\0\213\14"+
    "\1\0\5\15\2\0\236\14\11\0\46\14\2\0\1\14\7\0\47\14"+
    "\7\0\1\14\1\0\55\15\1\0\1\15\1\0\2\15\1\0\2\15"+
    "\1\0\1\15\10\0\33\14\5\0\3\14\15\0\5\15\6\0\1\14"+
    "\4\0\13\15\5\0\53\14\37\15\4\0\2\14\1\15\143\14\1\0"+
    "\1\14\10\15\1\0\6\15\2\14\2\15\1\0\4\15\2\14\12\15"+
    "\3\14\2\0\1\14\17\0\1\15\1\14\1\15\36\14\33\15\2\0"+
    "\131\14\13\15\1\14\16\0\12\15\41\14\11\15\2\14\4\0\1\14"+
    "\5\0\26\14\4\15\1\14\11\15\1\14\3\15\1\14\5\15\22\0"+
    "\31\14\3\15\104\0\1\14\1\0\13\14\67\0\33\15\1\0\4\15"+
    "\66\14\3\15\1\14\22\15\1\14\7\15\12\14\2\15\2\0\12\15"+
    "\1\0\7\14\1\0\7\14\1\0\3\15\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\2\0\1\15"+
    "\1\14\7\15\2\0\2\15\2\0\3\15\1\14\10\0\1\15\4\0"+
    "\2\14\1\0\3\14\2\15\2\0\12\15\4\14\7\0\1\14\5\0"+
    "\3\15\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\2\14\1\0\2\14\2\0\1\15\1\0\5\15\4\0"+
    "\2\15\2\0\3\15\3\0\1\15\7\0\4\14\1\0\1\14\7\0"+
    "\14\15\3\14\1\15\13\0\3\15\1\0\11\14\1\0\3\14\1\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\15\1\14"+
    "\10\15\1\0\3\15\1\0\3\15\2\0\1\14\17\0\2\14\2\15"+
    "\2\0\12\15\1\0\1\14\17\0\3\15\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\15"+
    "\1\14\7\15\2\0\2\15\2\0\3\15\10\0\2\15\4\0\2\14"+
    "\1\0\3\14\2\15\2\0\12\15\1\0\1\14\20\0\1\15\1\14"+
    "\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14"+
    "\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\4\0\5\15"+
    "\3\0\3\15\1\0\4\15\2\0\1\14\6\0\1\15\16\0\12\15"+
    "\11\0\1\14\7\0\3\15\1\0\10\14\1\0\3\14\1\0\27\14"+
    "\1\0\12\14\1\0\5\14\3\0\1\14\7\15\1\0\3\15\1\0"+
    "\4\15\7\0\2\15\1\0\2\14\6\0\2\14\2\15\2\0\12\15"+
    "\22\0\2\15\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14"+
    "\1\0\5\14\2\0\1\15\1\14\7\15\1\0\3\15\1\0\4\15"+
    "\7\0\2\15\7\0\1\14\1\0\2\14\2\15\2\0\12\15\1\0"+
    "\2\14\17\0\2\15\1\0\10\14\1\0\3\14\1\0\51\14\2\0"+
    "\1\14\7\15\1\0\3\15\1\0\4\15\1\14\10\0\1\15\10\0"+
    "\2\14\2\15\2\0\12\15\12\0\6\14\2\0\2\15\1\0\22\14"+
    "\3\0\30\14\1\0\11\14\1\0\1\14\2\0\7\14\3\0\1\15"+
    "\4\0\6\15\1\0\1\15\1\0\10\15\22\0\2\15\15\0\60\14"+
    "\1\15\2\14\7\15\4\0\10\14\10\15\1\0\12\15\47\0\2\14"+
    "\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14"+
    "\1\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14"+
    "\1\0\4\14\1\15\2\14\6\15\1\0\2\15\1\14\2\0\5\14"+
    "\1\0\1\14\1\0\6\15\2\0\12\15\2\0\4\14\40\0\1\14"+
    "\27\0\2\15\6\0\12\15\13\0\1\15\1\0\1\15\1\0\1\15"+
    "\4\0\2\15\10\14\1\0\44\14\4\0\24\15\1\0\2\15\5\14"+
    "\13\15\1\0\44\15\11\0\1\15\71\0\53\14\24\15\1\14\12\15"+
    "\6\0\6\14\4\15\4\14\3\15\1\14\3\15\2\14\7\15\3\14"+
    "\4\15\15\14\14\15\1\14\17\15\2\0\46\14\1\0\1\14\5\0"+
    "\1\14\2\0\53\14\1\0\u014d\14\1\0\4\14\2\0\7\14\1\0"+
    "\1\14\1\0\4\14\2\0\51\14\1\0\4\14\2\0\41\14\1\0"+
    "\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\17\14\1\0"+
    "\71\14\1\0\4\14\2\0\103\14\2\0\3\15\40\0\20\14\20\0"+
    "\125\14\14\0\u026c\14\2\0\21\14\1\0\32\14\5\0\113\14\3\0"+
    "\3\14\17\0\15\14\1\0\4\14\3\15\13\0\22\14\3\15\13\0"+
    "\22\14\2\15\14\0\15\14\1\0\3\14\1\0\2\15\14\0\64\14"+
    "\40\15\3\0\1\14\3\0\2\14\1\15\2\0\12\15\41\0\3\15"+
    "\2\0\12\15\6\0\130\14\10\0\51\14\1\15\1\14\5\0\106\14"+
    "\12\0\35\14\3\0\14\15\4\0\14\15\12\0\12\15\36\14\2\0"+
    "\5\14\13\0\54\14\4\0\21\15\7\14\2\15\6\0\12\15\46\0"+
    "\27\14\5\15\4\0\65\14\12\15\1\0\35\15\2\0\13\15\6\0"+
    "\12\15\15\0\1\14\130\0\5\15\57\14\21\15\7\14\4\0\12\15"+
    "\21\0\11\15\14\0\3\15\36\14\15\15\2\14\12\15\54\14\16\15"+
    "\14\0\44\14\24\15\10\0\12\15\3\0\3\14\12\15\44\14\122\0"+
    "\3\15\1\0\25\15\4\14\1\15\4\14\3\15\2\14\11\0\300\14"+
    "\47\15\25\0\4\15\u0116\14\2\0\6\14\2\0\46\14\2\0\6\14"+
    "\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\37\14"+
    "\2\0\65\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14"+
    "\3\0\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0\7\14"+
    "\16\0\5\15\30\0\1\3\1\3\5\15\20\0\2\14\23\0\1\14"+
    "\13\0\5\15\5\0\6\15\1\0\1\14\15\0\1\14\20\0\15\14"+
    "\3\0\33\14\25\0\15\15\4\0\1\15\3\0\14\15\21\0\1\14"+
    "\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14"+
    "\5\0\5\14\4\0\1\14\21\0\51\14\u0a77\0\57\14\1\0\57\14"+
    "\1\0\205\14\6\0\4\14\3\15\2\14\14\0\46\14\1\0\1\14"+
    "\5\0\1\14\2\0\70\14\7\0\1\14\17\0\1\15\27\14\11\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\40\15\57\0\1\14\u01d5\0"+
    "\3\14\31\0\11\14\6\15\1\0\5\14\2\0\5\14\4\0\126\14"+
    "\2\0\2\15\2\0\3\14\1\0\132\14\1\0\4\14\5\0\51\14"+
    "\3\0\136\14\21\0\33\14\65\0\20\14\u0200\0\u19b6\14\112\0\u51cd\14"+
    "\63\0\u048d\14\103\0\56\14\2\0\u010d\14\3\0\20\14\12\15\2\14"+
    "\24\0\57\14\1\15\4\0\12\15\1\0\31\14\7\0\1\15\120\14"+
    "\2\15\45\0\11\14\2\0\147\14\2\0\4\14\1\0\4\14\14\0"+
    "\13\14\115\0\12\14\1\15\3\14\1\15\4\14\1\15\27\14\5\15"+
    "\20\0\1\14\7\0\64\14\14\0\2\15\62\14\21\15\13\0\12\15"+
    "\6\0\22\15\6\14\3\0\1\14\4\0\12\15\34\14\10\15\2\0"+
    "\27\14\15\15\14\0\35\14\3\0\4\15\57\14\16\15\16\0\1\14"+
    "\12\15\46\0\51\14\16\15\11\0\3\14\1\15\10\14\2\15\2\0"+
    "\12\15\6\0\27\14\3\0\1\14\1\15\4\0\60\14\1\15\1\14"+
    "\3\15\2\14\2\15\5\14\2\15\1\14\1\15\1\14\30\0\3\14"+
    "\2\0\13\14\5\15\2\0\3\14\2\15\12\0\6\14\2\0\6\14"+
    "\2\0\6\14\11\0\7\14\1\0\7\14\221\0\43\14\10\15\1\0"+
    "\2\15\2\0\12\15\6\0\u2ba4\14\14\0\27\14\4\0\61\14\u2104\0"+
    "\u016e\14\2\0\152\14\46\0\7\14\14\0\5\14\5\0\1\14\1\15"+
    "\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0"+
    "\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14\50\0"+
    "\15\14\3\0\20\15\20\0\7\15\14\0\2\14\30\0\3\14\31\0"+
    "\1\14\6\0\5\14\1\0\207\14\2\0\1\15\4\0\1\14\13\0"+
    "\12\15\7\0\32\14\4\0\1\14\1\0\32\14\13\0\131\14\3\0"+
    "\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\2\14\3\0"+
    "\2\14\22\0\3\15\4\0\14\14\1\0\32\14\1\0\23\14\1\0"+
    "\2\14\1\0\17\14\2\0\16\14\42\0\173\14\105\0\65\14\210\0"+
    "\1\15\202\0\35\14\3\0\61\14\57\0\37\14\21\0\33\14\65\0"+
    "\36\14\2\0\44\14\4\0\10\14\1\0\5\14\52\0\236\14\2\0"+
    "\12\15\u0356\0\6\14\2\0\1\14\1\0\54\14\1\0\2\14\3\0"+
    "\1\14\2\0\27\14\252\0\26\14\12\0\32\14\106\0\70\14\6\0"+
    "\2\14\100\0\1\14\3\15\1\0\2\15\5\0\4\15\4\14\1\0"+
    "\3\14\1\0\33\14\4\0\3\15\4\0\1\15\40\0\35\14\203\0"+
    "\66\14\12\0\26\14\12\0\23\14\215\0\111\14\u03b7\0\3\15\65\14"+
    "\17\15\37\0\12\15\20\0\3\15\55\14\13\15\2\0\1\15\22\0"+
    "\31\14\7\0\12\15\6\0\3\15\44\14\16\15\1\0\12\15\100\0"+
    "\3\15\60\14\16\15\4\14\13\0\12\15\u04a6\0\53\14\15\15\10\0"+
    "\12\15\u0936\0\u036f\14\221\0\143\14\u0b9d\0\u042f\14\u33d1\0\u0239\14\u04c7\0"+
    "\105\14\13\0\1\14\56\15\20\0\4\15\15\14\u4060\0\2\14\u2163\0"+
    "\5\15\3\0\26\15\2\0\7\15\36\0\4\15\224\0\3\15\u01bb\0"+
    "\125\14\1\0\107\14\1\0\2\14\2\0\1\14\2\0\2\14\2\0"+
    "\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\101\14\1\0"+
    "\4\14\2\0\10\14\1\0\7\14\1\0\34\14\1\0\4\14\1\0"+
    "\5\14\1\0\1\14\3\0\7\14\1\0\u0154\14\2\0\31\14\1\0"+
    "\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\10\14\2\0"+
    "\62\15\u1600\0\4\14\1\0\33\14\1\0\2\14\1\0\1\14\2\0"+
    "\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0"+
    "\1\14\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0"+
    "\2\14\1\0\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0"+
    "\7\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0"+
    "\21\14\5\0\3\14\1\0\5\14\1\0\21\14\u1144\0\ua6d7\14\51\0"+
    "\u1035\14\13\0\336\14\u3fe2\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\15\36\0\140\15\200\0\360\15\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\5\10\1\1\1\11\1\12\3\10\1\13\1\14\13\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\5\2\0\1\10\1\47"+
    "\2\10\1\50\3\10\1\0\2\51\1\0\1\52\1\0"+
    "\2\53\1\0\1\54\7\10\1\0\25\10\1\55\3\10"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\2\46\2\0"+
    "\1\5\1\0\1\10\1\74\6\10\4\0\7\10\1\0"+
    "\1\75\27\10\1\76\2\10\1\0\1\46\7\10\1\77"+
    "\2\10\1\100\2\0\1\10\1\101\1\102\1\103\2\10"+
    "\1\104\1\0\5\10\1\105\1\106\1\107\2\10\1\110"+
    "\1\111\5\10\1\112\4\10\1\113\17\10\1\114\2\0"+
    "\2\10\1\115\1\0\10\10\1\116\12\10\1\117\1\120"+
    "\2\10\1\121\2\10\1\122\6\10\1\0\6\10\1\123"+
    "\1\10\1\124\1\125\2\10\1\126\3\10\1\127\1\130"+
    "\1\131\1\10\1\132\1\133\1\10\1\134\4\10\1\0"+
    "\4\10\1\135\1\10\1\136\3\10\1\137\3\10\1\140"+
    "\1\141\1\142\1\143\1\0\1\10\1\144\2\10\1\145"+
    "\1\146\1\147\1\150\1\10\1\151\1\10\1\152\1\153"+
    "\1\10\1\154\1\155\2\10\1\156\5\10\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u011c\0\u01aa"+
    "\0\u011c\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u011c\0\u04b7\0\u04fe\0\u0545\0\u011c"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u011c\0\u011c\0\u011c\0\u0ad1\0\u0b18\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u027f\0\u0c7b\0\u02c6\0\u0cc2\0\u0d09\0\u02c6"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0429\0\u0e25\0\u011c\0\u0e6c\0\u011c"+
    "\0\u0470\0\u0eb3\0\u011c\0\u0efa\0\u011c\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u16be\0\u1705\0\u02c6\0\u174c\0\u1793\0\u17da\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u1821\0\u011c\0\u1868\0\u18af"+
    "\0\u18f6\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0"+
    "\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u02c6\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339"+
    "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u02c6\0\u252a"+
    "\0\u2571\0\u25b8\0\u1868\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u02c6\0\u27f0\0\u2837\0\u02c6\0\u287e\0\u28c5"+
    "\0\u290c\0\u02c6\0\u02c6\0\u02c6\0\u2953\0\u299a\0\u02c6\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u02c6\0\u02c6\0\u02c6"+
    "\0\u2b8b\0\u2bd2\0\u02c6\0\u02c6\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u02c6\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u02c6\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u02c6\0\u32c1"+
    "\0\u3308\0\u334f\0\u3396\0\u02c6\0\u33dd\0\u3424\0\u346b\0\u34b2"+
    "\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u02c6\0\u365c\0\u36a3"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db"+
    "\0\u02c6\0\u02c6\0\u3922\0\u3969\0\u02c6\0\u39b0\0\u39f7\0\u02c6"+
    "\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f"+
    "\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u02c6\0\u3dd9\0\u02c6"+
    "\0\u02c6\0\u3e20\0\u3e67\0\u02c6\0\u3eae\0\u3ef5\0\u3f3c\0\u02c6"+
    "\0\u02c6\0\u02c6\0\u3f83\0\u02c6\0\u02c6\0\u3fca\0\u02c6\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249"+
    "\0\u02c6\0\u4290\0\u02c6\0\u42d7\0\u431e\0\u4365\0\u02c6\0\u43ac"+
    "\0\u43f3\0\u443a\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u4481\0\u44c8"+
    "\0\u02c6\0\u450f\0\u4556\0\u02c6\0\u02c6\0\u02c6\0\u02c6\0\u459d"+
    "\0\u02c6\0\u45e4\0\u011c\0\u02c6\0\u462b\0\u4672\0\u02c6\0\u46b9"+
    "\0\u4700\0\u02c6\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u02c6"+
    "\0\u02c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\4\7\1\10\1\11\1\12\1\13\1\14"+
    "\2\15\1\5\1\12\1\16\1\17\1\20\1\15\1\5"+
    "\1\21\1\15\1\22\1\23\1\24\1\25\1\26\1\15"+
    "\1\27\1\30\1\31\1\32\1\33\1\15\1\34\1\35"+
    "\1\36\1\37\1\15\1\40\1\41\1\42\1\43\1\44"+
    "\3\15\1\12\1\15\4\12\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\5\1\66\1\0"+
    "\1\5\20\66\1\67\3\66\1\70\57\66\1\71\1\0"+
    "\1\5\2\0\30\71\1\72\50\71\1\73\1\5\1\0"+
    "\1\74\2\0\5\5\1\75\10\5\1\76\63\5\111\0"+
    "\1\7\112\0\1\77\1\100\107\0\1\12\1\0\1\101"+
    "\1\102\2\0\1\12\23\0\1\102\14\0\1\12\1\0"+
    "\4\12\32\0\1\12\1\0\1\103\3\0\1\12\40\0"+
    "\1\12\1\0\4\12\32\0\1\101\5\0\1\101\40\0"+
    "\1\101\1\0\4\101\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\26\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\3\15\1\104\3\15\1\105\16\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\1\106\10\15\1\107\1\15\1\110\12\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\7\15\1\111\16\15\26\0\1\15"+
    "\3\0\1\15\2\0\5\15\1\112\2\15\1\0\2\15"+
    "\3\0\4\15\2\0\4\15\1\113\21\15\22\0\1\114"+
    "\1\115\3\116\16\114\1\117\2\114\1\120\60\114\1\121"+
    "\1\122\3\123\16\121\1\124\3\121\1\125\57\121\4\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\3\15\1\126\2\15\1\127\3\15\1\130"+
    "\2\15\1\131\1\15\1\132\6\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\6\15\1\133\1\134\16\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\1\114\1\121\1\0\4\15"+
    "\2\0\26\15\42\0\1\135\72\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\3\15"+
    "\1\136\6\15\1\137\13\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\7\15"+
    "\1\140\2\15\1\141\2\15\1\142\10\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\2\15"+
    "\1\143\1\15\2\0\1\144\1\15\1\145\3\15\1\146"+
    "\1\15\1\147\15\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\1\150\3\15\2\0\14\15"+
    "\1\151\11\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\6\15\1\152\1\153"+
    "\2\15\1\154\13\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\3\15\1\155"+
    "\22\15\26\0\1\15\3\0\1\15\2\0\5\15\1\156"+
    "\2\15\1\0\2\15\3\0\4\15\2\0\7\15\1\157"+
    "\16\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\3\15\1\160\3\15\1\161"+
    "\16\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\162\3\15\2\0\4\15\1\163\21\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\7\15\1\164\2\15\1\165\13\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\15\15\1\166\10\15\32\0\1\12"+
    "\1\0\1\103\3\0\1\12\40\0\1\12\1\0\4\12"+
    "\1\0\1\167\106\0\1\170\1\0\1\171\103\0\1\172"+
    "\1\0\1\173\1\174\106\0\1\175\106\0\1\176\117\0"+
    "\1\177\107\0\1\200\4\0\1\66\2\0\20\66\1\0"+
    "\3\66\1\0\57\66\27\0\1\201\1\0\1\202\5\0"+
    "\1\203\5\0\1\204\41\0\1\77\1\205\1\206\104\77"+
    "\7\207\1\210\77\207\10\0\1\101\2\0\1\102\2\0"+
    "\1\101\23\0\1\102\14\0\1\101\1\0\4\101\32\0"+
    "\1\211\1\212\4\0\1\211\40\0\1\211\1\0\4\211"+
    "\1\212\25\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\13\15\1\213\12\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\1\214\3\15\2\0\2\15\1\215\23\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\5\15\1\216\20\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\1\217\3\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\1\220\25\15\26\0\1\15"+
    "\3\0\1\15\2\0\5\15\1\221\2\15\1\0\2\15"+
    "\3\0\4\15\2\0\3\15\1\222\22\15\24\0\1\116"+
    "\122\0\1\114\4\0\1\114\2\223\5\114\1\224\3\0"+
    "\1\114\5\0\1\114\1\0\1\114\1\0\2\114\6\0"+
    "\4\114\24\0\1\123\122\0\1\121\4\0\1\121\2\225"+
    "\5\121\1\226\3\0\1\121\5\0\1\121\1\0\1\121"+
    "\1\0\2\121\6\0\4\121\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\11\15"+
    "\1\227\14\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\1\230\1\15\3\0\4\15\2\0\26\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\4\15\1\231\21\15\26\0\1\15\3\0"+
    "\1\15\2\0\5\15\1\232\2\15\1\0\2\15\3\0"+
    "\4\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\5\15\1\233"+
    "\20\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\3\15\1\234\22\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\7\15\1\235\16\15\61\0\1\236\53\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\14\15\1\237\11\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\11\15\1\240\14\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\1\241\10\15"+
    "\1\242\14\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\2\15\1\243\1\15"+
    "\1\244\21\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\12\15\1\245\13\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\5\15\1\246\20\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\1\247\1\15\3\0"+
    "\4\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\4\15\1\250"+
    "\21\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\6\15\1\251\17\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\3\15\1\252\22\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\6\15\1\253\17\15\26\0\1\15\3\0\1\15\2\0"+
    "\5\15\1\254\2\15\1\0\2\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\7\15\1\255\16\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\4\15\1\256\21\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\1\15\1\257\24\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\1\260\3\15\2\0\4\15"+
    "\1\261\21\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\6\15\1\262\17\15"+
    "\26\0\1\15\3\0\1\15\2\0\5\15\1\263\2\15"+
    "\1\0\2\15\3\0\4\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\4\15\1\264\21\15\26\0\1\15\3\0\1\15"+
    "\2\0\4\15\1\265\3\15\1\0\2\15\3\0\4\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\7\15\1\266\16\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\6\15\1\267\17\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\2\15\1\270\23\15\26\0\1\15\3\0\1\15"+
    "\2\0\5\15\1\271\2\15\1\0\2\15\3\0\4\15"+
    "\2\0\26\15\24\0\1\206\104\0\7\207\1\272\105\207"+
    "\1\273\1\272\77\207\10\0\1\211\5\0\1\211\40\0"+
    "\1\211\1\0\4\211\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\12\15\1\274"+
    "\13\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\3\15\1\275\14\15\1\276"+
    "\1\15\1\277\1\15\1\300\1\15\26\0\1\15\3\0"+
    "\1\15\2\0\5\15\1\301\2\15\1\0\2\15\3\0"+
    "\4\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\2\15\1\302"+
    "\23\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\7\15\1\303\16\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\1\304\3\15\2\0\26\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\1\305"+
    "\25\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\4\15\1\306\21\15\32\0"+
    "\1\307\2\0\1\307\2\0\2\307\2\0\1\307\7\0"+
    "\1\307\5\0\1\307\1\0\1\307\6\0\2\307\4\0"+
    "\1\307\1\0\4\307\32\0\1\114\2\0\1\114\2\0"+
    "\2\114\2\0\1\114\7\0\1\114\5\0\1\114\1\0"+
    "\1\114\6\0\2\114\4\0\1\114\1\0\4\114\32\0"+
    "\1\310\2\0\1\310\2\0\2\310\2\0\1\310\7\0"+
    "\1\310\5\0\1\310\1\0\1\310\6\0\2\310\4\0"+
    "\1\310\1\0\4\310\32\0\1\121\2\0\1\121\2\0"+
    "\2\121\2\0\1\121\7\0\1\121\5\0\1\121\1\0"+
    "\1\121\6\0\2\121\4\0\1\121\1\0\4\121\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\5\15\1\311\20\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\3\15\1\312\22\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\16\15\1\313"+
    "\7\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\4\15\1\314\21\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\3\15\1\315\22\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\12\15\1\316\13\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\2\15\1\317"+
    "\23\15\62\0\1\320\52\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\3\15\1\321"+
    "\22\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\322\3\15\2\0\13\15\1\323\12\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\5\15\1\324\3\15\1\325\14\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\2\15\1\326\23\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\3\15\1\327\22\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\6\15"+
    "\1\330\17\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\2\15\1\331\4\15"+
    "\1\332\16\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\11\15\1\333\14\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\3\15\1\334\22\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\7\15\1\335\16\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\1\336"+
    "\25\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\1\337\1\15\3\0\4\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\340"+
    "\3\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\10\15\1\341"+
    "\15\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\342\3\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\16\15\1\343\7\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\1\344\1\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\1\345\1\15\3\0\4\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\346"+
    "\3\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\4\15\1\347\3\15\1\0\2\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\4\15\1\350\21\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\1\351\1\15"+
    "\3\0\4\15\2\0\26\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\11\15"+
    "\1\352\14\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\4\15\1\353\21\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\2\15\1\354\23\15\22\0\6\207"+
    "\1\206\1\272\77\207\4\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\1\355\1\15\3\0\4\15\2\0\26\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\6\15\1\356\17\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\21\15\1\357\4\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\23\15"+
    "\1\360\2\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\25\15\1\361\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\1\362\25\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\3\15"+
    "\1\363\22\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\20\15\1\364\1\15"+
    "\1\365\1\15\1\366\1\15\26\0\1\15\3\0\1\15"+
    "\2\0\6\15\1\367\1\15\1\0\2\15\3\0\4\15"+
    "\2\0\26\15\32\0\1\370\2\0\1\370\2\0\2\370"+
    "\2\0\1\370\7\0\1\370\5\0\1\370\1\0\1\370"+
    "\6\0\2\370\4\0\1\370\1\0\4\370\32\0\1\371"+
    "\2\0\1\371\2\0\2\371\2\0\1\371\7\0\1\371"+
    "\5\0\1\371\1\0\1\371\6\0\2\371\4\0\1\371"+
    "\1\0\4\371\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\2\15\1\372\23\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\1\373\25\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\16\15\1\374\7\15\63\0\1\375\51\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\4\15\1\376\21\15\26\0\1\15\3\0\1\15\2\0"+
    "\5\15\1\377\2\15\1\0\2\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\5\15\1\u0100"+
    "\2\15\1\0\2\15\3\0\4\15\2\0\26\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\7\15\1\u0101\16\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\12\15\1\u0102\13\15\26\0\1\15\3\0\1\15\2\0"+
    "\5\15\1\u0103\2\15\1\0\2\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\6\15\1\u0104\17\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\6\15\1\u0105\17\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0106\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\1\15\1\u0107\24\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\1\15\1\u0108\24\15\26\0\1\15"+
    "\3\0\1\15\2\0\5\15\1\u0109\2\15\1\0\2\15"+
    "\3\0\4\15\2\0\26\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\3\15"+
    "\1\u010a\22\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\6\15\1\u010b\17\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\2\15\1\u010c\23\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\1\u010d\1\15\3\0"+
    "\4\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\12\15\1\u010e"+
    "\13\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\2\15\1\u010f\23\15\26\0"+
    "\1\15\3\0\1\15\2\0\5\15\1\u0110\2\15\1\0"+
    "\2\15\3\0\4\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\3\15\1\u0111\22\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\3\15\1\u0112"+
    "\22\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\2\15\1\u0113\23\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\13\15\1\u0114\12\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0115\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\21\15\1\u0116\4\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\21\15\1\u0117\4\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\3\15\1\u0118\22\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\11\15"+
    "\1\u0119\14\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\21\15\1\u011a\4\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\23\15\1\u011b\2\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\25\15\1\u011c\32\0\1\224\2\0\1\224\2\0"+
    "\2\224\2\0\1\224\7\0\1\224\5\0\1\224\1\0"+
    "\1\224\6\0\2\224\4\0\1\224\1\0\4\224\32\0"+
    "\1\226\2\0\1\226\2\0\2\226\2\0\1\226\7\0"+
    "\1\226\5\0\1\226\1\0\1\226\6\0\2\226\4\0"+
    "\1\226\1\0\4\226\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\12\15\1\u011d"+
    "\13\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\12\15\1\u011e\13\15\46\0"+
    "\1\u011f\66\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\5\15\1\u0120\20\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\1\u0121\25\15\26\0\1\15\3\0\1\15"+
    "\2\0\6\15\1\u0122\1\15\1\0\2\15\3\0\4\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\1\u0123\25\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\1\u0124\25\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\1\15"+
    "\1\u0125\24\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\1\u0126\3\15\2\0\26\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\21\15\1\u0127\4\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0128\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\15\15\1\u0129\10\15"+
    "\26\0\1\15\3\0\1\15\2\0\4\15\1\u012a\3\15"+
    "\1\0\2\15\3\0\4\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\u012b"+
    "\3\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\1\u012c\25\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\1\u012d\3\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\12\15\1\u012e\13\15\26\0\1\15\3\0\1\15\2\0"+
    "\6\15\1\u012f\1\15\1\0\2\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\3\15\1\u0130\22\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\1\15\1\u0131\24\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0132\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\12\15\1\u0133\13\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\1\u0134\3\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0135\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\3\15\1\u0136\22\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\1\u0137\3\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\21\15\1\u0138\4\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\21\15\1\u0139"+
    "\4\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\u013a\3\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\11\15\1\u013b\14\15\41\0\1\u013c\73\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\12\15\1\u013d\13\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\1\u013e\1\15\3\0\4\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\1\u013f\1\15\3\0\4\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\3\15\1\u0140\22\15\26\0\1\15\3\0\1\15"+
    "\2\0\4\15\1\u0141\3\15\1\0\2\15\3\0\4\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\5\15"+
    "\1\u0142\2\15\1\0\2\15\3\0\4\15\2\0\26\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\1\u0143\3\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\3\15\1\u0144\22\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\21\15\1\u0145"+
    "\4\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\21\15\1\u0146\4\15\26\0"+
    "\1\15\3\0\1\15\2\0\10\15\1\0\2\15\3\0"+
    "\4\15\2\0\2\15\1\u0147\23\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\3\15\1\u0148\22\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\1\15\1\u0149"+
    "\24\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\1\u014a\25\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\u014b"+
    "\3\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\1\u014c\3\15\2\0\26\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\3\15\1\u014d\22\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\3\15\1\u014e\22\15\64\0\1\u014f\50\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\1\15\1\u0150\24\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\4\15\2\0\3\15"+
    "\1\u0151\22\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\6\15\1\u0152\17\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\1\u0153\25\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0154\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\4\15\1\u0155\21\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\1\u0156\3\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\1\u0157\3\15"+
    "\2\0\26\15\26\0\1\15\3\0\1\15\2\0\10\15"+
    "\1\0\2\15\3\0\4\15\2\0\21\15\1\u0158\4\15"+
    "\26\0\1\15\3\0\1\15\2\0\10\15\1\0\2\15"+
    "\3\0\4\15\2\0\3\15\1\u0159\22\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\u015a"+
    "\3\15\2\0\26\15\65\0\1\u015b\47\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\3\15\1\u015c\22\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\12\15\1\u015d"+
    "\13\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\u015e\3\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\1\u015f"+
    "\3\15\2\0\26\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\12\15\1\u0160"+
    "\13\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\1\u0161\3\15\2\0\26\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\4\15\1\u0162\21\15\26\0\1\15\3\0\1\15"+
    "\2\0\10\15\1\0\2\15\3\0\1\u0163\3\15\2\0"+
    "\26\15\26\0\1\15\3\0\1\15\2\0\5\15\1\u0164"+
    "\2\15\1\0\2\15\3\0\4\15\2\0\26\15\26\0"+
    "\1\15\3\0\1\15\2\0\5\15\1\u0165\2\15\1\0"+
    "\2\15\3\0\4\15\2\0\26\15\26\0\1\15\3\0"+
    "\1\15\2\0\10\15\1\0\2\15\3\0\4\15\2\0"+
    "\7\15\1\u0166\16\15\26\0\1\15\3\0\1\15\2\0"+
    "\10\15\1\0\2\15\3\0\4\15\2\0\7\15\1\u0167"+
    "\16\15\26\0\1\15\3\0\1\15\2\0\10\15\1\0"+
    "\2\15\3\0\4\15\2\0\1\u0168\25\15\26\0\1\15"+
    "\3\0\1\15\2\0\10\15\1\0\2\15\3\0\4\15"+
    "\2\0\1\u0169\25\15\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18602];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\12\1\1\11"+
    "\3\1\1\11\20\1\7\11\3\1\3\11\2\1\7\11"+
    "\1\1\1\0\1\1\2\0\10\1\1\0\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\1\11\1\0\1\11\7\1"+
    "\1\0\31\1\16\11\1\1\1\11\2\0\1\1\1\0"+
    "\10\1\4\0\7\1\1\0\33\1\1\0\14\1\2\0"+
    "\7\1\1\0\47\1\2\0\3\1\1\0\41\1\1\0"+
    "\34\1\1\0\22\1\1\0\13\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private StringBuffer string           = new StringBuffer();
    private StringBuffer preProcessorText = new StringBuffer();
    private boolean      preProcessorCont = false;
    private StringBuffer braceContent     = new StringBuffer();
    private int          braceCount       = 0; 
    private Triplet beforeToken = new Triplet(null,null,null);
    private String keywordClass;
    private String keyword;
    private ParserError lexerError = new ParserError();
    private boolean toParser = false;
    //public ArrayList<Triplet> ignore = new ArrayList<>();
    /*public Lexer(File filename) throws FileNotFoundException {
        this(new FileInputStream(filename));
    }*/

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    public void setToParser(boolean toParser){
	this.toParser = toParser;
    }
    public ParserError getLexerError(){
        return this.lexerError;
    }
    public int yyline(){
        return this.yyline;
    }
    public String getKeywordClass(){
        return this.keywordClass;
    }
    public String getKeyword(){
        return this.keyword;
    }
    private Symbol symbol(int type, String keywordClass) {
        //System.err.println("get1: " + beforeToken.get1() + " type: " +type + " keyword: " + keywordClass);
	if(beforeToken.get1() != null && ((int)beforeToken.get1() == sym.INTEGER || (int)beforeToken.get1() == sym.FLOAT) && ("type".equals(keywordClass) || sym.IDENTIFIER ==  type )){
	    this.lexerError.setLine(((int)beforeToken.get3()));
	    this.lexerError.setColumn(yycolumn);
            
            String error = (String)beforeToken.get2();
            beforeToken = new Triplet(null,null,null);
	    this.lexerError.setMessage("Illegal character <"+ error + yytext()+">");
	    throw new Error("Illegal character <"+ error + yytext()+">");
	}	
	
	
	this.keyword = yytext();
	this.keywordClass = keywordClass;
        beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn);
        
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value,String keywordClass) {
        if(beforeToken.get1() != null && ((int)beforeToken.get1() == sym.INTEGER || (int)beforeToken.get1() == sym.FLOAT) && ("type".equals(keywordClass) || sym.IDENTIFIER ==  type )){
	    this.lexerError.setLine(((int)beforeToken.get3()));
	    this.lexerError.setColumn(yycolumn);
            
            String error = (String)beforeToken.get2();
            beforeToken = new Triplet(null,null,null);
	    this.lexerError.setMessage("Illegal character <"+ error + yytext()+">");
	    throw new Error("Illegal character <"+ error + yytext()+">");
	}
        
	this.keyword = yytext();
	this.keywordClass = keywordClass;
	beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn, value);
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2890) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { //return symbol(sym.error);

	this.lexerError.setLine(((int)beforeToken.get3())+1);
this.lexerError.setColumn(yycolumn);
	this.lexerError.setMessage("Illegal character <"+ yytext()+">");	
    throw new Error("Illegal character <"+ yytext()+">");
          }
        case 113: break;
        case 2: 
          { //ignore.add(new Triplet(-2,String.copyValueOf(yytext().toCharArray()),""));
	if(!toParser)	
		return symbol(-2, yytext(),"WHITE_SPACE");
        /* ignore */
          }
        case 114: break;
        case 3: 
          { return symbol(sym.DIVIDE,"arithmetic_operator");
          }
        case 115: break;
        case 4: 
          { return symbol(sym.TIMES,"arithmetic_operator");
          }
        case 116: break;
        case 5: 
          { return symbol(sym.FLOAT, yytext(),"Number");
          }
        case 117: break;
        case 6: 
          { return symbol(sym.PLUS,"arithmetic_operator");
          }
        case 118: break;
        case 7: 
          { return symbol(sym.DOT,"keyword");
          }
        case 119: break;
        case 8: 
          { return symbol(sym.IDENTIFIER, yytext(),"ID");
          }
        case 120: break;
        case 9: 
          { string.setLength(0);
        yybegin(STRING);
          }
        case 121: break;
        case 10: 
          { return symbol(sym.QUESTION,"keyword");
          }
        case 122: break;
        case 11: 
          { braceCount++;
        if (braceCount == 1) {
            braceContent.setLength(0);
            yybegin(BRACE);
            return symbol(sym.OPEN_BRACE,"brace");
        }
          }
        case 123: break;
        case 12: 
          { preProcessorText.setLength(0);
        preProcessorText.append(yytext());
        yybegin(PREPROCESSOR);
          }
        case 124: break;
        case 13: 
          { return symbol(sym.MINUS,"arithmetic_operator");
          }
        case 125: break;
        case 14: 
          { return symbol(sym.GREATER_THAN,"comparison_operator");
          }
        case 126: break;
        case 15: 
          { return symbol(sym.LESS_THAN,"comparison_operator");
          }
        case 127: break;
        case 16: 
          { return symbol(sym.EQUALS, yytext(),"operator");
          }
        case 128: break;
        case 17: 
          { return symbol(sym.SEMI_COLON,"end_expressions");
          }
        case 129: break;
        case 18: 
          { return symbol(sym.OPEN_PAREN,"function_call");
          }
        case 130: break;
        case 19: 
          { return symbol(sym.CLOSE_PAREN,"function_call");
          }
        case 131: break;
        case 20: 
          { return symbol(sym.OPEN_CURLY,"braces");
          }
        case 132: break;
        case 21: 
          { return symbol(sym.CLOSE_CURLY,"braces");
          }
        case 133: break;
        case 22: 
          { return symbol(sym.COMMA,"comma_operator");
          }
        case 134: break;
        case 23: 
          { return symbol(sym.NOT,"logical_operator");
          }
        case 135: break;
        case 24: 
          { return symbol(sym.BITWISE_AND,"bitwise_operator");
          }
        case 136: break;
        case 25: 
          { return symbol(sym.BITWISE_OR,"bitwise_operator");
          }
        case 137: break;
        case 26: 
          { return symbol(sym.BITWISE_XOR,"bitwise_operator");
          }
        case 138: break;
        case 27: 
          { return symbol(sym.COLON,"keyword");
          }
        case 139: break;
        case 28: 
          { return symbol(sym.BITWISE_NOT,"bitwise_operator");
          }
        case 140: break;
        case 29: 
          { string.append( yytext() );
          }
        case 141: break;
        case 30: 
          { string.append('\\');
          }
        case 142: break;
        case 31: 
          { yybegin(YYINITIAL);
        return symbol(sym.STRING, string.toString(),"String");
          }
        case 143: break;
        case 32: 
          { braceContent.append(yytext());
          }
        case 144: break;
        case 33: 
          { braceContent.append(yytext());
        braceCount++;
          }
        case 145: break;
        case 34: 
          { --braceCount;
        if (braceCount == 0) {
            yybegin(YYINITIAL);
            return symbol(sym.CLOSE_BRACE, braceContent.toString(),"keyword");
        } else {
        braceContent.append(yytext());
        }
          }
        case 146: break;
        case 35: 
          { if (preProcessorCont) {
            preProcessorCont = false;
        } else {
            yybegin(YYINITIAL);
        }
        preProcessorText.append(yytext());
        return symbol(sym.PREPROCESSOR, preProcessorText.toString(),"keyword");
          }
        case 147: break;
        case 36: 
          { preProcessorText.append(yytext());
        preProcessorCont = false;
          }
        case 148: break;
        case 37: 
          { preProcessorCont = true;
        preProcessorText.append(yytext());
          }
        case 149: break;
        case 38: 
          { //System.err.println(yytext());
//ignore.add(new Triplet(-3,String.copyValueOf(yytext().toCharArray()),"COMMENT"));
	if(!toParser)
		return symbol(-2, yytext() ,"COMMENT");
        /* ignore */
          }
        case 150: break;
        case 39: 
          { return symbol(sym.DO,"common_define");
          }
        case 151: break;
        case 40: 
          { return symbol(sym.IF,"common_define");
          }
        case 152: break;
        case 41: 
          { this.lexerError.setLine(yyline);
	this.lexerError.setColumn(yycolumn);
	this.lexerError.setMessage("Illegal character <"+ yytext()+">");	
    	throw new Error("Illegal character <"+ yytext()+">");
          }
        case 153: break;
        case 42: 
          { return symbol(sym.CHARACTER, new String(yytext()),"Character");
          }
        case 154: break;
        case 43: 
          { this.lexerError.setLine(yyline);
	this.lexerError.setColumn(yycolumn);
	this.lexerError.setMessage("Illegal String <" +yytext()+ ">");	
    	throw new Error("Illegal String <"+ yytext()+">");
          }
        case 155: break;
        case 44: 
          { return symbol(sym.STRING, new String(yytext()),"String");
          }
        case 156: break;
        case 45: 
          { return symbol(sym.AS,"common_define");
          }
        case 157: break;
        case 46: 
          { return symbol(sym.WIRES_TO, yytext(),"pointer_operator");
          }
        case 158: break;
        case 47: 
          { return symbol(sym.RSHIFT,"bitwise_operator");
          }
        case 159: break;
        case 48: 
          { return symbol(sym.GREATER_EQUAL_THAN,"comparison_operator");
          }
        case 160: break;
        case 49: 
          { return symbol(sym.WIRES_FROM, yytext(),"pointer_operator");
          }
        case 161: break;
        case 50: 
          { return symbol(sym.LSHIFT,"bitwise_operator");
          }
        case 162: break;
        case 51: 
          { return symbol(sym.LESS_EQUAL_THAN,"comparison_operator");
          }
        case 163: break;
        case 52: 
          { return symbol(sym.EQCOMPARE,"comparison");
          }
        case 164: break;
        case 53: 
          { return symbol(sym.EQNOT_EQUAL,"comparison_operator");
          }
        case 165: break;
        case 54: 
          { return symbol(sym.AND,"logical_operator");
          }
        case 166: break;
        case 55: 
          { return symbol(sym.OR,"logical_operator");
          }
        case 167: break;
        case 56: 
          { string.append('\"');
          }
        case 168: break;
        case 57: 
          { string.append('\t');
          }
        case 169: break;
        case 58: 
          { string.append('\n');
          }
        case 170: break;
        case 59: 
          { string.append('\r');
          }
        case 171: break;
        case 60: 
          { return symbol(sym.INT,"type");
          }
        case 172: break;
        case 61: 
          { return symbol(sym.NEW,"common_define");
          }
        case 173: break;
        case 62: 
          { return symbol(sym.FOR,"common_define");
          }
        case 174: break;
        case 63: 
          { return symbol(sym.GOTO,"common_define");
          }
        case 175: break;
        case 64: 
          { return symbol(sym.USES,"common_define");
          }
        case 176: break;
        case 65: 
          { return symbol(sym.TRUE,"common_define");
          }
        case 177: break;
        case 66: 
          { return symbol(sym.TASK,"common_define");
          }
        case 178: break;
        case 67: 
          { return symbol(sym.THIS,"common_define");
          }
        case 179: break;
        case 68: 
          { return symbol(sym.BOOL,"type");
          }
        case 180: break;
        case 69: 
          { return symbol(sym.CALL,"common_define");
          }
        case 181: break;
        case 70: 
          { return symbol(sym.CASE,"common_define");
          }
        case 182: break;
        case 71: 
          { return symbol(sym.CHAR,"type");
          }
        case 183: break;
        case 72: 
          { return symbol(sym.ENUM,"type");
          }
        case 184: break;
        case 73: 
          { return symbol(sym.ELSE,"common_define");
          }
        case 185: break;
        case 74: 
          { return symbol(sym.POST,"common_define");
          }
        case 186: break;
        case 75: 
          { return symbol(sym.VOID,"type");
          }
        case 187: break;
        case 76: 
          { return symbol(sym.USING,"common_define");
          }
        case 188: break;
        case 77: 
          { return symbol(sym.BREAK,"common_define");
          }
        case 189: break;
        case 78: 
          { return symbol(sym.EVENT,"common_define");
          }
        case 190: break;
        case 79: 
          { return symbol(sym.FALSE,"common_define");
          }
        case 191: break;
        case 80: 
          { return symbol(sym.WHILE,"common_define");
          }
        case 192: break;
        case 81: 
          { return symbol(sym.INT8_T,"type");
          }
        case 193: break;
        case 82: 
          { return symbol(sym.INLINE,"type");
          }
        case 194: break;
        case 83: 
          { return symbol(sym.EXPORT,"type");
          }
        case 195: break;
        case 84: 
          { return symbol(sym.STRUCT,"type");
          }
        case 196: break;
        case 85: 
          { return symbol(sym.SWITCH,"common_define");
          }
        case 197: break;
        case 86: 
          { return symbol(sym.RETURN,"common_define");
          }
        case 198: break;
        case 87: 
          { return symbol(sym.MODULE,"common_define");
          }
        case 199: break;
        case 88: 
          { return symbol(sym.ATOMIC,"common_define");
          }
        case 200: break;
        case 89: 
          { return symbol(sym.DEFAULT,"common_define");
          }
        case 201: break;
        case 90: 
          { return symbol(sym.INT16_T,"type");
          }
        case 202: break;
        case 91: 
          { return symbol(sym.INT32_T,"type");
          }
        case 203: break;
        case 92: 
          { return symbol(sym.UINT8_T,"type");
          }
        case 204: break;
        case 93: 
          { return symbol(sym.COMMAND,"common_define");
          }
        case 205: break;
        case 94: 
          { return symbol(sym.ERROR_T,"type");
          }
        case 206: break;
        case 95: 
          { return symbol(sym.VIRTUAL,"common_define");
          }
        case 207: break;
        case 96: 
          { return symbol(sym.UINT16_T,"type");
          }
        case 208: break;
        case 97: 
          { return symbol(sym.UINT32_T,"type");
          }
        case 209: break;
        case 98: 
          { return symbol(sym.TEMPLATE,"common_define");
          }
        case 210: break;
        case 99: 
          { return symbol(sym.TYPENAME,"common_define");
          }
        case 211: break;
        case 100: 
          { return symbol(sym.CONTINUE,"common_define");
          }
        case 212: break;
        case 101: 
          { return symbol(sym.EXPLICIT,"type");
          }
        case 213: break;
        case 102: 
          { return symbol(sym.PROVIDES,"common_define");
          }
        case 214: break;
        case 103: 
          { return symbol(sym.PACKET_T,"type");
          }
        case 215: break;
        case 104: 
          { return symbol(sym.RESULT_T,"type");
          }
        case 216: break;
        case 105: 
          { return symbol(sym.INTERFACE,"common_define");
          }
        case 217: break;
        case 106: 
          { /**/
        return symbol(sym.INCLUDES,"common_define");
          }
        case 218: break;
        case 107: 
          { return symbol(sym.NAMESPACE,"common_define");
          }
        case 219: break;
        case 108: 
          { return symbol(sym.COMPONENT,"common_define");
          }
        case 220: break;
        case 109: 
          { return symbol(sym.MESSAGE_T,"type");
          }
        case 221: break;
        case 110: 
          { return symbol(sym.COMPONENTS,"common_define");
          }
        case 222: break;
        case 111: 
          { return symbol(sym.CONFIGURATION,"common_define");
          }
        case 223: break;
        case 112: 
          { return symbol(sym.IMPLEMENTATION,"common_define");
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
