/* The following code was generated by JFlex 1.6.0 */


/* --------------------------Codigo de Usuario----------------------- */
package code;

import java_cup.runtime.*;
import java.lang.reflect.Field;
import java.util.HashMap;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/main/java/generator/lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int BRACE = 4;
  public static final int PREPROCESSOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\15\1\16\1\16\1\14\22\0\1\17\1\103\1\25"+
    "\1\53\1\0\1\77\1\100\1\24\1\111\1\112\1\21\1\76\1\107"+
    "\1\5\1\72\1\20\1\70\1\64\1\67\1\66\2\22\1\65\1\22"+
    "\1\62\1\1\1\110\1\104\1\75\1\74\1\73\1\26\1\115\1\55"+
    "\3\3\1\4\1\7\5\2\1\11\5\2\1\60\1\56\1\57\1\13"+
    "\2\2\1\71\2\2\1\32\1\23\1\113\1\101\1\63\1\0\1\30"+
    "\1\33\1\37\1\46\1\35\1\6\1\50\1\41\1\45\1\2\1\36"+
    "\1\10\1\47\1\43\1\42\1\54\1\2\1\34\1\40\1\44\1\12"+
    "\1\27\1\52\1\31\1\61\1\51\1\105\1\102\1\106\1\114\6\0"+
    "\1\16\u1fa2\0\1\16\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\5\3\2\5\1\6"+
    "\1\7\2\1\1\10\2\3\1\11\14\3\1\1\3\3"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\0\2\2"+
    "\1\47\1\50\1\51\4\3\2\0\3\3\1\52\1\0"+
    "\1\53\1\54\1\0\2\55\1\0\2\56\1\0\1\57"+
    "\3\3\1\60\30\3\1\61\3\3\1\62\5\3\1\0"+
    "\5\3\2\0\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\2\1\0\1\2"+
    "\1\3\1\106\7\3\2\52\2\0\1\107\6\0\35\3"+
    "\1\110\7\3\1\111\10\3\1\0\5\3\1\2\1\112"+
    "\1\113\1\114\2\3\1\115\1\116\4\3\1\0\1\52"+
    "\2\0\1\3\1\117\5\3\1\120\2\3\1\121\5\3"+
    "\1\122\1\123\1\124\1\125\17\3\1\126\1\3\1\127"+
    "\15\3\1\130\1\3\1\0\2\3\1\131\1\132\1\3"+
    "\1\133\1\134\1\135\1\3\1\136\3\3\2\0\3\3"+
    "\1\137\1\3\1\140\2\3\1\141\6\3\1\142\3\3"+
    "\1\143\31\3\1\144\1\0\12\3\1\145\1\3\1\146"+
    "\1\147\2\3\1\150\5\3\1\151\1\152\1\153\1\154"+
    "\1\155\1\156\3\3\1\157\3\3\1\160\2\3\1\161"+
    "\4\3\1\162\1\3\1\163\1\3\1\0\4\3\1\164"+
    "\3\3\1\165\2\3\1\166\1\3\1\167\2\3\1\170"+
    "\6\3\1\171\2\3\1\172\1\173\1\3\1\174\1\3"+
    "\1\175\1\0\3\3\1\176\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\3\1\205\2\3\1\206\1\3\1\207"+
    "\1\210\1\211\3\3\1\212\1\213\1\214\2\3\1\215"+
    "\1\216\1\217\1\220\1\3\1\221\2\3\1\222\10\3"+
    "\1\223\1\3\1\224\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0138\0\u0444"+
    "\0\u0492\0\u04e0\0\u052e\0\u0138\0\u057c\0\u05ca\0\u0138\0\u0618"+
    "\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888"+
    "\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8"+
    "\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68"+
    "\0\u0db6\0\u0e04\0\u0138\0\u0138\0\u0138\0\u0138\0\u0e52\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0ea0\0\u0eee\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0f3c\0\u0f8a\0\u0fd8"+
    "\0\u0138\0\u0138\0\u0138\0\u1026\0\u1074\0\u10c2\0\u1110\0\u04e0"+
    "\0\u052e\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u0138\0\u0138"+
    "\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u0138\0\u146a\0\u0138"+
    "\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da"+
    "\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a"+
    "\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba"+
    "\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u01d4\0\u1d40\0\u1d8e\0\u1ddc"+
    "\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c"+
    "\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220\0\u226e\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u22bc\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u230a\0\u2358\0\u0138\0\u23a6\0\u01d4\0\u23f4\0\u2442"+
    "\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u0138\0\u2664"+
    "\0\u26b2\0\u0138\0\u1380\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838"+
    "\0\u2886\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18"+
    "\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88"+
    "\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u01d4\0\u315c\0\u31aa"+
    "\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a"+
    "\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u0138\0\u0138\0\u0138"+
    "\0\u385e\0\u38ac\0\u01d4\0\u01d4\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u3a32\0\u2664\0\u3a80\0\u3ace\0\u3b1c\0\u01d4\0\u3b6a\0\u3bb8"+
    "\0\u3c06\0\u3c54\0\u3ca2\0\u01d4\0\u3cf0\0\u3d3e\0\u01d4\0\u3d8c"+
    "\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134"+
    "\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356\0\u01d4"+
    "\0\u43a4\0\u01d4\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578"+
    "\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u01d4"+
    "\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u01d4\0\u01d4\0\u4920\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u496e\0\u01d4\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6"+
    "\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u01d4\0\u4c2c\0\u01d4\0\u4c7a"+
    "\0\u4cc8\0\u01d4\0\u4d16\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c"+
    "\0\u01d4\0\u4eea\0\u4f38\0\u4f86\0\u01d4\0\u4fd4\0\u5022\0\u5070"+
    "\0\u50be\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0"+
    "\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550"+
    "\0\u559e\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u01d4\0\u5772"+
    "\0\u57c0\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2"+
    "\0\u5a30\0\u5a7e\0\u01d4\0\u5acc\0\u01d4\0\u01d4\0\u5b1a\0\u5b68"+
    "\0\u01d4\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u5d3c\0\u5d8a\0\u5dd8\0\u01d4"+
    "\0\u5e26\0\u5e74\0\u5ec2\0\u01d4\0\u5f10\0\u5f5e\0\u01d4\0\u5fac"+
    "\0\u5ffa\0\u6048\0\u6096\0\u01d4\0\u60e4\0\u01d4\0\u6132\0\u6180"+
    "\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u01d4\0\u6306\0\u6354\0\u63a2"+
    "\0\u01d4\0\u63f0\0\u643e\0\u01d4\0\u648c\0\u01d4\0\u64da\0\u6528"+
    "\0\u01d4\0\u6576\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u01d4"+
    "\0\u674a\0\u6798\0\u01d4\0\u01d4\0\u67e6\0\u01d4\0\u6834\0\u01d4"+
    "\0\u6882\0\u68d0\0\u691e\0\u696c\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u69ba\0\u01d4\0\u6a08\0\u6a56\0\u01d4"+
    "\0\u6aa4\0\u01d4\0\u01d4\0\u01d4\0\u6af2\0\u6b40\0\u6b8e\0\u0138"+
    "\0\u01d4\0\u01d4\0\u6bdc\0\u6c2a\0\u6c78\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u6cc6\0\u01d4\0\u6d14\0\u6d62\0\u01d4\0\u6db0\0\u6dfe\0\u6e4c"+
    "\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84\0\u6fd2\0\u01d4\0\u7020\0\u01d4"+
    "\0\u01d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\3\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\7\1\16\3\17\1\20\1\21\1\6\1\5"+
    "\1\22\1\23\1\24\1\25\1\26\1\7\1\27\1\30"+
    "\1\31\1\32\1\7\1\33\1\34\2\7\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\7\1\43\1\44\1\45"+
    "\2\7\1\46\2\7\1\6\1\47\4\6\1\50\1\7"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\14\75\1\0\1\5\5\75"+
    "\1\76\1\75\1\77\70\75\14\100\1\0\1\5\1\0"+
    "\13\100\1\101\60\100\1\102\2\100\14\5\1\0\1\103"+
    "\1\0\4\5\1\104\46\5\1\105\23\5\117\0\1\6"+
    "\2\0\1\106\3\0\4\107\6\0\1\6\12\0\1\106"+
    "\24\0\1\6\1\0\5\6\1\0\1\110\24\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\31\0\1\111\65\0\1\112\1\113\22\0"+
    "\4\7\1\0\2\7\1\114\3\7\6\0\1\7\4\0"+
    "\3\7\1\0\7\7\1\115\10\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\1\7\1\116\14\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\7\7\1\117"+
    "\10\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\1\0\1\120\1\121\1\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\122\2\7\1\123\1\7"+
    "\1\124\5\7\1\0\16\7\41\0\1\17\120\0\1\125"+
    "\1\126\52\0\1\127\115\0\1\130\21\0\14\131\1\132"+
    "\2\133\4\131\1\134\1\0\71\131\14\121\1\135\2\136"+
    "\4\121\1\137\1\121\1\140\70\121\1\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\7\7\1\141"+
    "\2\7\1\142\5\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\1\143\4\7"+
    "\1\144\3\7\1\145\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\1\7"+
    "\1\146\5\7\1\147\10\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\150\15\7\1\0\16\7\25\0\4\7\1\0\2\7"+
    "\1\151\3\7\6\0\1\7\4\0\1\152\1\7\1\153"+
    "\1\0\1\7\1\154\6\7\1\155\7\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\7"+
    "\1\156\1\7\1\0\6\7\1\157\1\160\10\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\6\7\1\161\2\7\1\162\1\163\4\7"+
    "\1\164\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\1\7\1\165\1\166\1\0\2\7\1\167"+
    "\4\7\1\170\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\1\7\1\171\1\7\1\0"+
    "\2\7\1\172\3\7\1\173\11\7\1\0\5\7\1\174"+
    "\10\7\25\0\4\7\1\0\1\175\5\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\176\3\7\1\177\3\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\200\4\7\1\201\10\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\202\4\7\1\203\10\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\204\4\7\1\205\10\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\6\7\1\206\11\7\1\0\16\7"+
    "\71\0\1\207\51\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\1\7\1\210\1\7\1\0\1\7\1\211\5\7"+
    "\1\212\10\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\4\7"+
    "\1\213\11\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\7\7\1\214\6\7"+
    "\25\0\1\6\2\0\1\106\3\0\4\107\6\0\1\6"+
    "\6\0\1\215\3\0\1\106\24\0\1\6\1\0\5\6"+
    "\1\215\1\110\24\0\1\110\20\0\1\110\37\0\1\110"+
    "\1\0\5\110\1\0\1\216\116\0\1\217\1\220\115\0"+
    "\1\221\26\0\1\222\66\0\1\223\1\224\1\0\1\64"+
    "\10\0\1\27\101\0\1\225\1\0\1\226\112\0\1\65"+
    "\1\227\115\0\1\230\3\0\1\231\111\0\1\232\115\0"+
    "\1\233\5\0\1\234\107\0\1\235\114\0\1\72\22\0"+
    "\14\75\2\0\5\75\1\0\1\75\1\0\70\75\25\0"+
    "\1\236\6\0\1\237\6\0\1\240\1\241\52\0\1\242"+
    "\3\0\1\243\14\0\1\242\37\0\1\242\1\0\5\242"+
    "\5\0\1\243\27\0\4\107\103\0\1\110\2\0\1\106"+
    "\1\0\4\244\10\0\1\110\12\0\1\106\24\0\1\110"+
    "\1\0\5\110\26\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\7\7\1\245\10\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\1\7\1\246\16\7\1\0\16\7\25\0\4\7"+
    "\1\0\3\7\1\247\2\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\10\7\1\250\7\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\251\7\7\1\252\5\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\253\4\7\1\254\5\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\255\7\7\1\0\16\7"+
    "\24\0\14\125\1\256\1\257\100\125\21\260\1\261\74\260"+
    "\14\131\1\132\2\133\4\131\1\134\1\262\71\131\15\263"+
    "\1\133\5\263\1\264\1\262\114\263\1\264\1\262\77\263"+
    "\1\131\3\263\2\265\3\0\3\263\7\131\1\266\1\263"+
    "\2\131\6\263\2\131\17\263\5\131\25\263\15\0\1\136"+
    "\106\0\1\121\3\0\2\267\6\0\7\121\1\270\1\0"+
    "\2\121\6\0\2\121\17\0\5\121\26\0\4\7\1\0"+
    "\2\7\1\271\3\7\6\0\1\7\4\0\3\7\1\0"+
    "\12\7\1\272\5\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\1\7\1\273"+
    "\16\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\5\7\1\274\12\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\5\7\1\275\10\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\7\7\1\276\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\2\7\1\277"+
    "\15\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\7\7\1\300\10\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\5\7\1\301\3\7\1\302\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\5\7\1\303\12\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\2\7\1\304\15\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\305"+
    "\6\7\1\0\1\306\15\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\1\7\1\307\16\7"+
    "\1\0\16\7\25\0\4\7\1\0\4\7\1\310\1\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\2\7\1\311\3\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\312\12\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\7"+
    "\1\313\1\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\314\3\7\1\315\3\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\7\7"+
    "\1\316\10\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\1\7\1\317\1\7\1\0\1\7"+
    "\1\320\16\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\15\7\1\321\1\322"+
    "\1\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\12\7\1\323\5\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\14\7\1\324\3\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\7\7\1\325\6\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\17\7\1\326"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\327\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\5\7\1\330\12\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\14\7"+
    "\1\331\3\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\12\7\1\332\5\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\1\333\15\7\25\0"+
    "\4\7\1\0\2\7\1\334\3\7\6\0\1\7\4\0"+
    "\3\7\1\0\4\7\1\335\4\7\1\336\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\1\337\15\7\25\0\4\7"+
    "\1\0\1\340\5\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\16\7\25\0\4\7\1\0\4\7\1\341"+
    "\1\7\6\0\1\7\4\0\3\7\1\0\20\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\5\7\1\342\12\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\13\7\1\343\4\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\10\7\1\344"+
    "\7\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\345\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\12\7\1\346\5\7\1\0\16\7\67\0"+
    "\1\347\53\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\4\7\1\350\13\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\7\7\1\351\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\5\7\1\352"+
    "\12\7\1\0\16\7\25\0\4\7\1\0\5\7\1\353"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\7"+
    "\1\354\1\7\1\0\20\7\1\0\16\7\25\0\1\355"+
    "\1\0\2\355\1\0\2\355\12\0\1\355\5\0\1\355"+
    "\2\0\1\355\1\0\1\355\1\0\1\355\6\0\1\355"+
    "\6\0\1\355\4\0\1\355\1\0\5\355\117\0\1\356"+
    "\117\0\1\357\115\0\1\360\22\0\1\242\4\0\4\244"+
    "\10\0\1\242\37\0\1\242\1\0\5\242\26\0\1\242"+
    "\20\0\1\242\37\0\1\242\1\0\5\242\26\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\1\7\1\361\1\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\2\7"+
    "\1\362\13\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\15\7\1\363\2\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\5\7\1\364\12\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\365\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\12\7\1\366\5\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\7\7\1\367\10\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\370\6\7\1\0\16\7\41\0\1\257"+
    "\100\0\21\260\1\371\114\260\1\372\1\371\74\260\14\263"+
    "\3\0\100\263\1\373\1\263\2\373\1\263\2\373\12\263"+
    "\1\373\1\264\1\262\3\263\1\373\2\263\1\373\1\263"+
    "\1\373\1\263\1\373\6\263\1\373\6\263\1\373\4\263"+
    "\1\373\1\263\5\373\26\263\1\131\1\263\2\131\1\263"+
    "\2\131\12\263\1\131\1\264\1\262\3\263\1\131\2\263"+
    "\1\131\1\263\1\131\1\263\1\131\6\263\1\131\6\263"+
    "\1\131\4\263\1\131\1\263\5\131\25\263\1\0\1\374"+
    "\1\0\2\374\1\0\2\374\12\0\1\374\5\0\1\374"+
    "\2\0\1\374\1\0\1\374\1\0\1\374\6\0\1\374"+
    "\6\0\1\374\4\0\1\374\1\0\5\374\26\0\1\121"+
    "\1\0\2\121\1\0\2\121\12\0\1\121\5\0\1\121"+
    "\2\0\1\121\1\0\1\121\1\0\1\121\6\0\1\121"+
    "\6\0\1\121\4\0\1\121\1\0\5\121\26\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\1\7\1\375\1\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\13\7\1\376\4\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\11\7\1\377\6\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u0100\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\u0101\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\14\7\1\u0102\3\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\1\7\1\u0103\1\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\2\7\1\u0104\3\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\4\7\1\u0105\1\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\4\7"+
    "\1\u0106\1\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\u0107\15\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\10\7\1\u0108\7\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u0109\15\7\1\0\16\7\25\0\4\7\1\0\2\7"+
    "\1\u010a\3\7\6\0\1\7\4\0\3\7\1\0\7\7"+
    "\1\u010b\10\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\7\7\1\u010c\10\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\14\7\1\u010d\3\7\1\0\16\7"+
    "\25\0\4\7\1\0\2\7\1\u010e\3\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u010f\15\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\1\7\1\u0110\16\7"+
    "\1\0\16\7\25\0\4\7\1\0\1\u0111\5\7\6\0"+
    "\1\7\4\0\3\7\1\0\5\7\1\u0112\3\7\1\u0113"+
    "\6\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\14\7\1\u0114\3\7\1\0"+
    "\1\u0115\15\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\u0116\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u0117\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\4\7\1\u0118\1\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\10\7\1\u0119\7\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\u011a\15\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u011b\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u011c\15\7\1\0\16\7\25\0\4\7\1\0\4\7"+
    "\1\u011d\1\7\6\0\1\7\4\0\3\7\1\0\5\7"+
    "\1\u011e\12\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\1\7\1\u011f\1\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\3\7\1\u0120\14\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\1\u0121\15\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\5\7\1\u0122"+
    "\12\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\2\7\1\u0123\15\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\12\7\1\u0124\5\7\1\0\16\7\25\0"+
    "\4\7\1\0\2\7\1\u0125\3\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\2\7\1\u0126"+
    "\15\7\1\0\6\7\1\u0127\1\7\1\u0128\1\7\1\u0129"+
    "\3\7\25\0\4\7\1\0\2\7\1\u012a\3\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\1\7\1\u012b"+
    "\1\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\1\u012c\17\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\u012d\12\7\1\0\16\7"+
    "\25\0\4\7\1\0\4\7\1\u012e\1\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u012f\15\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\7\7\1\u0130\10\7"+
    "\1\0\16\7\25\0\4\7\1\0\2\7\1\u0131\3\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\63\0\1\u0132\57\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\3\7\1\u0133\14\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\u0134"+
    "\2\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\u0135"+
    "\6\7\1\0\16\7\25\0\3\7\1\u0136\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u0137\6\7\1\0\16\7\25\0\1\355"+
    "\1\0\2\355\1\0\2\355\4\107\6\0\1\355\5\0"+
    "\1\355\2\0\1\355\1\0\1\355\1\0\1\355\6\0"+
    "\1\355\6\0\1\355\4\0\1\355\1\0\5\355\26\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\11\7\1\u0138\6\7\1\0\16\7\25\0\3\7\1\u0139"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\15\7\1\u013a\2\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\15\7\1\u013b\2\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\u013c\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\6\7"+
    "\1\u013d\1\7\1\u013e\1\7\1\u013f\3\7\24\0\20\260"+
    "\1\257\1\371\74\260\1\263\1\u0140\1\263\2\u0140\1\263"+
    "\2\u0140\12\263\1\u0140\1\264\1\262\3\263\1\u0140\2\263"+
    "\1\u0140\1\263\1\u0140\1\263\1\u0140\6\263\1\u0140\6\263"+
    "\1\u0140\4\263\1\u0140\1\263\5\u0140\25\263\1\0\1\u0141"+
    "\1\0\2\u0141\1\0\2\u0141\12\0\1\u0141\5\0\1\u0141"+
    "\2\0\1\u0141\1\0\1\u0141\1\0\1\u0141\6\0\1\u0141"+
    "\6\0\1\u0141\4\0\1\u0141\1\0\5\u0141\26\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u0142\6\7\1\0\16\7\25\0\4\7\1\0\4\7"+
    "\1\u0143\1\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\u0144\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u0145\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\12\7"+
    "\1\u0146\5\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\3\7\1\u0147\14\7"+
    "\1\0\16\7\25\0\4\7\1\0\2\7\1\u0148\3\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\1\7\1\u0149\16\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u014a\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\1\7\1\u014b\6\7"+
    "\1\u014c\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\12\7\1\u014d\5\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\u014e\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\1\7\1\u014f\16\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\12\7"+
    "\1\u0150\5\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u0151\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\12\7\1\u0152\5\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\7"+
    "\1\u0153\1\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\7\7"+
    "\1\u0154\10\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u0155\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\12\7\1\u0156\5\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u0157\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\1\7\1\u0158\1\7"+
    "\1\0\2\7\1\u0159\15\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\7\7"+
    "\1\u015a\10\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\4\7\1\u015b\13\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\u015c\12\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\10\7\1\u015d\7\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u015e\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\4\7\1\u015f\13\7"+
    "\1\0\16\7\25\0\4\7\1\0\2\7\1\u0160\3\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\10\7\1\u0161\2\7\1\u0162\4\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\10\7\1\u0163\7\7\1\0\16\7\25\0\4\7"+
    "\1\0\4\7\1\u0164\1\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\1\7\1\u0165\16\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\7\7\1\u0166\6\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\11\7\1\u0167\4\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\13\7\1\u0168\2\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u0169\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\4\7\1\u016a\1\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\2\7\1\u016b\3\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\1\7\1\u016c\1\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\2\7"+
    "\1\u016d\3\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\u016e\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\2\7\1\u016f\15\7\1\0\16\7\34\0\1\u0170"+
    "\106\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\2\7\1\u0171\15\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\12\7"+
    "\1\u0172\5\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u0173\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\u0174\7\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\7\7\1\u0175\6\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\11\7\1\u0176\4\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\13\7"+
    "\1\u0177\2\7\24\0\1\263\1\266\1\263\2\266\1\263"+
    "\2\266\12\263\1\266\1\264\1\262\3\263\1\266\2\263"+
    "\1\266\1\263\1\266\1\263\1\266\6\263\1\266\6\263"+
    "\1\266\4\263\1\266\1\263\5\266\25\263\1\0\1\270"+
    "\1\0\2\270\1\0\2\270\12\0\1\270\5\0\1\270"+
    "\2\0\1\270\1\0\1\270\1\0\1\270\6\0\1\270"+
    "\6\0\1\270\4\0\1\270\1\0\5\270\26\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\12\7"+
    "\1\u0178\5\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\1\7\1\u0179\1\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\1\7\1\u017a\1\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u017b\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u017c\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\10\7\1\u017d\7\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\u017e\7\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\13\7\1\u017f\4\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\4\7"+
    "\1\u0180\13\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u0181\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\20\7\1\0\7\7\1\u0182\6\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\15\7\1\u0183\2\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\u0184\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\10\7\1\u0185\7\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\u0186\7\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u0187\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u0188\6\7\1\0\16\7\25\0\4\7\1\0\2\7"+
    "\1\u0189\3\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\13\7\1\u018a\4\7\1\0\16\7"+
    "\25\0\4\7\1\0\1\u018b\5\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\6\7\1\u018c"+
    "\11\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\1\u018d\15\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\12\7\1\u018e\5\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\1\7"+
    "\1\u018f\16\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u0190\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\1\7\1\u0191\1\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\1\7"+
    "\1\u0192\1\7\1\0\20\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u0193\15\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u0194\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\13\7\1\u0195\4\7\1\0\16\7"+
    "\25\0\4\7\1\0\1\u0196\5\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\u0197"+
    "\6\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\7\7\1\u0198"+
    "\6\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\7\7\1\u0199\6\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\14\7\1\u019a\3\7\1\0\16\7\25\0\4\7\1\0"+
    "\2\7\1\u019b\3\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\2\7\1\u019c\15\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\15\7\1\u019d\2\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\2\7\1\u019e\15\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\12\7\1\u019f"+
    "\5\7\1\0\16\7\36\0\1\u01a0\104\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\u01a1"+
    "\6\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\13\7\1\u01a2\4\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\1\7\1\u01a3\16\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\2\7\1\u01a4\15\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\u01a5"+
    "\6\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\7\7\1\u01a6"+
    "\6\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\7\7\1\u01a7\6\7\25\0"+
    "\4\7\1\0\2\7\1\u01a8\3\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\2\7\1\u01a9\3\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\4\7\1\u01aa\13\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\7\7\1\u01ab\6\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\5\7\1\u01ac\12\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\12\7\1\u01ad"+
    "\5\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\u01ae\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\4\7\1\u01af\1\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\16\7\25\0"+
    "\4\7\1\0\4\7\1\u01b0\1\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\13\7\1\u01b1"+
    "\4\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\2\7\1\u01b2\15\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\1\7\1\u01b3\1\7\1\0\20\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\7\7\1\u01b4\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\4\7\1\u01b5\1\7\6\0\1\7\4\0\3\7\1\0"+
    "\20\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\u01b6\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\14\7\1\u01b7\3\7\1\0\16\7\25\0"+
    "\4\7\1\0\1\u01b8\5\7\6\0\1\7\4\0\3\7"+
    "\1\0\20\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u01b9\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\1\7\1\u01ba\1\7\1\0\20\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u01bb\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u01bc\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u01bd\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\11\7\1\u01be\6\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\2\7\1\u01bf\15\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\4\7"+
    "\1\u01c0\13\7\1\0\16\7\72\0\1\u01c1\50\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\20\7"+
    "\1\0\7\7\1\u01c2\6\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u01c3\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\12\7\1\u01c4\5\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\13\7\1\u01c5\4\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u01c6\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u01c7\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\2\7\1\u01c8\15\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\11\7\1\u01c9\6\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\11\7"+
    "\1\u01ca\6\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u01cb\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\1\7\1\u01cc\16\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\2\7\1\u01cd\15\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\u01ce\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\4\7\1\u01cf\13\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\10\7\1\u01d0\7\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u01d1\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\2\7"+
    "\1\u01d2\15\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\2\7\1\u01d3\15\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\u01d4\12\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\4\7\1\u01d5\13\7\1\0\16\7\25\0\4\7"+
    "\1\0\6\7\6\0\1\7\4\0\3\7\1\0\10\7"+
    "\1\u01d6\7\7\1\0\16\7\25\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\20\7\1\0\7\7"+
    "\1\u01d7\6\7\61\0\1\u01d8\61\0\4\7\1\0\6\7"+
    "\6\0\1\7\4\0\3\7\1\0\11\7\1\u01d9\6\7"+
    "\1\0\16\7\25\0\4\7\1\0\6\7\6\0\1\7"+
    "\4\0\3\7\1\0\5\7\1\u01da\12\7\1\0\16\7"+
    "\25\0\4\7\1\0\6\7\6\0\1\7\4\0\3\7"+
    "\1\0\1\u01db\17\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\1\7\1\u01dc\1\7\1\0"+
    "\20\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\u01dd\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\2\7\1\u01de\15\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\11\7\1\u01df\6\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\2\7\1\u01e0"+
    "\15\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\u01e1\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\11\7\1\u01e2\6\7\1\0\16\7\25\0"+
    "\4\7\1\0\4\7\1\u01e3\1\7\6\0\1\7\4\0"+
    "\3\7\1\0\20\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\11\7\1\u01e4"+
    "\6\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\5\7\1\u01e5\12\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\1\7\1\u01e6\1\7\1\0\20\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\11\7\1\u01e7\6\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\12\7\1\u01e8"+
    "\5\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\11\7\1\u01e9\6\7\1\0"+
    "\16\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\2\7\1\u01ea\15\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\7\7\1\u01eb\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\12\7\1\u01ec"+
    "\5\7\1\0\16\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\20\7\1\0\7\7\1\u01ed"+
    "\6\7\25\0\4\7\1\0\6\7\6\0\1\7\4\0"+
    "\3\7\1\0\10\7\1\u01ee\7\7\1\0\16\7\25\0"+
    "\4\7\1\0\6\7\6\0\1\7\4\0\3\7\1\0"+
    "\7\7\1\u01ef\10\7\1\0\16\7\25\0\4\7\1\0"+
    "\6\7\6\0\1\7\4\0\3\7\1\0\20\7\1\0"+
    "\7\7\1\u01f0\6\7\25\0\4\7\1\0\6\7\6\0"+
    "\1\7\4\0\3\7\1\0\10\7\1\u01f1\7\7\1\0"+
    "\16\7\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\11\1\1\11\4\1\1\11\2\1\1\11"+
    "\33\1\4\11\1\1\5\11\2\1\7\11\1\0\2\1"+
    "\3\11\4\1\2\0\4\1\1\0\2\11\1\0\2\1"+
    "\1\0\1\1\1\11\1\0\1\11\46\1\1\0\5\1"+
    "\2\0\1\1\4\11\1\1\15\11\1\1\1\0\1\11"+
    "\12\1\1\11\2\0\1\11\6\0\56\1\1\0\6\1"+
    "\3\11\10\1\1\0\1\1\2\0\65\1\1\0\15\1"+
    "\2\0\56\1\1\0\57\1\1\0\40\1\1\0\26\1"+
    "\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
    public Lexer(){
    }

    private StringBuffer string           = new StringBuffer();
    private StringBuffer preProcessorText = new StringBuffer();
    private boolean      preProcessorCont = false;
    private StringBuffer braceContent     = new StringBuffer();
    private int          braceCount       = 0; 
    private Triplet beforeToken = new Triplet(null,null,null);
    private String keywordClass;
    private String keyword;
    private ParserError lexerError = new ParserError();
    private boolean toParser = false;
    //public ArrayList<Triplet> ignore = new ArrayList<>();
    /*public Lexer(File filename) throws FileNotFoundException {
        this(new FileInputStream(filename));
    }*/

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    public void setToParser(boolean toParser){
	this.toParser = toParser;
    }
    public ParserError getLexerError(){
        return this.lexerError;
    }
    public int yyline(){
        return this.yyline;
    }
    public String getKeywordClass(){
        return this.keywordClass;
    }
    public String getKeyword(){
        return this.keyword;
    }
    private Symbol symbol(int type, String keywordClass) {
        //System.err.println("get1: " + beforeToken.get1() + " type: " +type + " keyword: " + keywordClass);
	if(beforeToken.get1() != null && ((int)beforeToken.get1() == sym.CONSTANT || (int)beforeToken.get1() == sym.CONSTANT) && ("type".equals(keywordClass) || sym.IDENTIFIER ==  type )){
	    this.lexerError.setLine(((int)beforeToken.get3()));
	    this.lexerError.setColumn(yycolumn);
            
            String error = (String)beforeToken.get2();
            beforeToken = new Triplet(null,null,null);
	    this.lexerError.setMessage("Illegal character <"+ error + yytext()+">");
	    throw new Error("Illegal character <"+ error + yytext()+">");
	}	
	
	
	this.keyword = yytext();
	this.keywordClass = keywordClass;
        beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn);
        
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value,String keywordClass) {
        if(beforeToken.get1() != null && ((int)beforeToken.get1() == sym.CONSTANT || (int)beforeToken.get1() == sym.CONSTANT) && ("type".equals(keywordClass) || sym.IDENTIFIER ==  type )){
	    this.lexerError.setLine(((int)beforeToken.get3()));
	    this.lexerError.setColumn(yycolumn);
            
            String error = (String)beforeToken.get2();
            beforeToken = new Triplet(null,null,null);
	    this.lexerError.setMessage("Illegal character <"+ error + yytext()+">");
	    throw new Error("Illegal character <"+ error + yytext()+">");
	}
        
	this.keyword = yytext();
	this.keywordClass = keywordClass;
	beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn, value);
    }

    public HashMap<Integer, String> getTokens()  throws IllegalArgumentException, IllegalAccessException{
	Field fld[] = sym.class.getDeclaredFields();
        HashMap<Integer, String> tokens = new HashMap<>();
        sym test = null;
        for (Field fld1 : fld) {
            //System.out.println("Variable: " + fld1.getName() + " Value: " + fld1.get(test));
            tokens.put((int) fld1.get(test), fld1.getName());
        }
	return tokens;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { //return symbol(sym.error);

    this.lexerError.setLine(((int)beforeToken.get3())+1);
this.lexerError.setColumn(yycolumn);
    this.lexerError.setMessage("Illegal character <"+ yytext()+">");    
    throw new Error("Illegal character <"+ yytext()+">");
          }
        case 150: break;
        case 2: 
          { return symbol(sym.CONSTANT, yytext(),"Number");
          }
        case 151: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext(),"ID");
          }
        case 152: break;
        case 4: 
          { return symbol(sym.MINUS,"arithmetic_operator");
          }
        case 153: break;
        case 5: 
          { //ignore.add(new Triplet(-2,String.copyValueOf(yytext().toCharArray()),""));
        if(!toParser)   
            return symbol(-2, yytext(),"WHITE_SPACE");
            /* ignore */
          }
        case 154: break;
        case 6: 
          { return symbol(sym.DIVIDE,"arithmetic_operator");
          }
        case 155: break;
        case 7: 
          { return symbol(sym.MULTIPLICATION,"arithmetic_operator");
          }
        case 156: break;
        case 8: 
          { return symbol(sym.TERNARY,"ternary_conditional");
          }
        case 157: break;
        case 9: 
          { return symbol(sym.OPEN_BRACE,"array_member");
          }
        case 158: break;
        case 10: 
          { return symbol(sym.DOT,"member_selection_operator");
          }
        case 159: break;
        case 11: 
          { return symbol(sym.GREATER_THAN,"comparison_operator");
          }
        case 160: break;
        case 12: 
          { return symbol(sym.EQUALS, "arithmetic_operator");
          }
        case 161: break;
        case 13: 
          { return symbol(sym.LESS_THAN,"comparison_operator");
          }
        case 162: break;
        case 14: 
          { return symbol(sym.PLUS,"arithmetic_operator");
          }
        case 163: break;
        case 15: 
          { return symbol(sym.MOD,"arithmetic_operator");
          }
        case 164: break;
        case 16: 
          { return symbol(sym.BITWISE_AND,"bitwise_operator");
          }
        case 165: break;
        case 17: 
          { return symbol(sym.BITWISE_XOR,"bitwise_operator");
          }
        case 166: break;
        case 18: 
          { return symbol(sym.BITWISE_OR,"bitwise_operator");
          }
        case 167: break;
        case 19: 
          { return symbol(sym.NOT,"logical_operator");
          }
        case 168: break;
        case 20: 
          { return symbol(sym.SEMI_COLON,"end_expressions");
          }
        case 169: break;
        case 21: 
          { return symbol(sym.OPEN_CURLY,"braces");
          }
        case 170: break;
        case 22: 
          { return symbol(sym.CLOSE_CURLY,"braces");
          }
        case 171: break;
        case 23: 
          { return symbol(sym.COMMA,"comma_operator");
          }
        case 172: break;
        case 24: 
          { return symbol(sym.COLON,"ternary_conditional");
          }
        case 173: break;
        case 25: 
          { return symbol(sym.OPEN_PAREN,"function_call");
          }
        case 174: break;
        case 26: 
          { return symbol(sym.CLOSE_PAREN,"function_call");
          }
        case 175: break;
        case 27: 
          { return symbol(sym.CLOSE_BRACE,"array_member");
          }
        case 176: break;
        case 28: 
          { return symbol(sym.BITWISE_NOT,"bitwise_operator");
          }
        case 177: break;
        case 29: 
          { return symbol(sym.AT,"at");
          }
        case 178: break;
        case 30: 
          { string.append( yytext() );
          }
        case 179: break;
        case 31: 
          { string.append('\\');
          }
        case 180: break;
        case 32: 
          { yybegin(YYINITIAL);
        return symbol(sym.STRING_LITERAL, string.toString(),"String");
          }
        case 181: break;
        case 33: 
          { braceContent.append(yytext());
          }
        case 182: break;
        case 34: 
          { braceContent.append(yytext());
        braceCount++;
          }
        case 183: break;
        case 35: 
          { --braceCount;
        if (braceCount == 0) {
            yybegin(YYINITIAL);
            return symbol(sym.CLOSE_BRACE, braceContent.toString(),"keyword");
        } else {
        braceContent.append(yytext());
        }
          }
        case 184: break;
        case 36: 
          { if (preProcessorCont) {
            preProcessorCont = false;
        } else {
            yybegin(YYINITIAL);
        }
        preProcessorText.append(yytext());
        return symbol(sym.PREPROCESSOR, preProcessorText.toString(),"keyword");
          }
        case 185: break;
        case 37: 
          { preProcessorCont = true;
        preProcessorText.append(yytext());
          }
        case 186: break;
        case 38: 
          { preProcessorText.append(yytext());
        preProcessorCont = false;
          }
        case 187: break;
        case 39: 
          { return symbol(sym.DEC_OP,"assignment_operators");
          }
        case 188: break;
        case 40: 
          { return symbol(sym.WIRES_TO,"wire");
          }
        case 189: break;
        case 41: 
          { return symbol(sym.SUB_ASSIGN,"assignment_operators");
          }
        case 190: break;
        case 42: 
          { //System.err.println(yytext());
        //ignore.add(new Triplet(-3,String.copyValueOf(yytext().toCharArray()),"COMMENT"));
        if(!toParser)
            return symbol(-2, yytext() ,"COMMENT");
            /* ignore */
          }
        case 191: break;
        case 43: 
          { return symbol(sym.DIV_ASSIGN,"assignment_operators");
          }
        case 192: break;
        case 44: 
          { return symbol(sym.MUL_ASSIGN,"assignment_operators");
          }
        case 193: break;
        case 45: 
          { this.lexerError.setLine(yyline);
        this.lexerError.setColumn(yycolumn);
        this.lexerError.setMessage("Illegal character <"+ yytext()+">");    
        throw new Error("Illegal character <"+ yytext()+">");
          }
        case 194: break;
        case 46: 
          { this.lexerError.setLine(yyline);
        this.lexerError.setColumn(yycolumn);
        this.lexerError.setMessage("Illegal String <" +yytext()+ ">");  
            throw new Error("Illegal String <"+ yytext()+">");
          }
        case 195: break;
        case 47: 
          { return symbol(sym.STRING_LITERAL, yytext(),"String");
          }
        case 196: break;
        case 48: 
          { return symbol(sym.AS,"common_define");
          }
        case 197: break;
        case 49: 
          { return symbol(sym.IF,"common_define");
          }
        case 198: break;
        case 50: 
          { return symbol(sym.DO,"type");
          }
        case 199: break;
        case 51: 
          { return symbol(sym.RIGHT_OP,"bitwise_operator");
          }
        case 200: break;
        case 52: 
          { return symbol(sym.GE_OP,"comparison_operator");
          }
        case 201: break;
        case 53: 
          { return symbol(sym.EQ_OP,"comparison_operator");
          }
        case 202: break;
        case 54: 
          { return symbol(sym.WIRES_FROM,"wire");
          }
        case 203: break;
        case 55: 
          { return symbol(sym.LE_OP,"comparison_operator");
          }
        case 204: break;
        case 56: 
          { return symbol(sym.LEFT_OP,"bitwise_operator");
          }
        case 205: break;
        case 57: 
          { return symbol(sym.ADD_ASSIGN,"assignment_operators");
          }
        case 206: break;
        case 58: 
          { return symbol(sym.INC_OP,"assignment_operators");
          }
        case 207: break;
        case 59: 
          { return symbol(sym.MOD_ASSIGN,"assignment_operators");
          }
        case 208: break;
        case 60: 
          { return symbol(sym.AND_ASSIGN,"assignment_operators");
          }
        case 209: break;
        case 61: 
          { return symbol(sym.AND_OP,"logical_operator");
          }
        case 210: break;
        case 62: 
          { return symbol(sym.XOR_ASSIGN,"assignment_operators");
          }
        case 211: break;
        case 63: 
          { return symbol(sym.OR_ASSIGN,"assignment_operators");
          }
        case 212: break;
        case 64: 
          { return symbol(sym.OR_OP,"logical_operator");
          }
        case 213: break;
        case 65: 
          { return symbol(sym.NE_OP,"comparison_operator");
          }
        case 214: break;
        case 66: 
          { string.append('\"');
          }
        case 215: break;
        case 67: 
          { string.append('\r');
          }
        case 216: break;
        case 68: 
          { string.append('\n');
          }
        case 217: break;
        case 69: 
          { string.append('\t');
          }
        case 218: break;
        case 70: 
          { return symbol(sym.FOR,"common_define");
          }
        case 219: break;
        case 71: 
          { /*'*/ return symbol(sym.CONSTANT, yytext(),"Char");
          }
        case 220: break;
        case 72: 
          { return symbol(sym.NEW,"common_define");
          }
        case 221: break;
        case 73: 
          { return symbol(sym.INT,"type");
          }
        case 222: break;
        case 74: 
          { return symbol(sym.ELLIPSIS,"assignment_operators");
          }
        case 223: break;
        case 75: 
          { return symbol(sym.RIGHT_ASSIGN,"assignment_operators");
          }
        case 224: break;
        case 76: 
          { return symbol(sym.LEFT_ASSIGN,"assignment_operators");
          }
        case 225: break;
        case 77: 
          { return symbol(sym.LONG,"common_define");
          }
        case 226: break;
        case 78: 
          { return symbol(sym.USES,"common_define");
          }
        case 227: break;
        case 79: 
          { return symbol(sym.VOID,"type");
          }
        case 228: break;
        case 80: 
          { return symbol(sym.BOOL,"type");
          }
        case 229: break;
        case 81: 
          { return symbol(sym.ELSE,"common_define");
          }
        case 230: break;
        case 82: 
          { return symbol(sym.ENUM,"type");
          }
        case 231: break;
        case 83: 
          { return symbol(sym.CALL,"common_define");
          }
        case 232: break;
        case 84: 
          { return symbol(sym.CASE,"common_define");
          }
        case 233: break;
        case 85: 
          { return symbol(sym.CHAR,"type");
          }
        case 234: break;
        case 86: 
          { return symbol(sym.TASK,"common_define");
          }
        case 235: break;
        case 87: 
          { return symbol(sym.THIS,"common_define");
          }
        case 236: break;
        case 88: 
          { return symbol(sym.GOTO,"common_define");
          }
        case 237: break;
        case 89: 
          { return symbol(sym.POST,"common_define");
          }
        case 238: break;
        case 90: 
          { return symbol(sym.TRUE,"common_define");
          }
        case 239: break;
        case 91: 
          { return symbol(sym.FLOAT,"type");
          }
        case 240: break;
        case 92: 
          { return symbol(sym.FALSE,"common_define");
          }
        case 241: break;
        case 93: 
          { return symbol(sym.USING,"common_define");
          }
        case 242: break;
        case 94: 
          { return symbol(sym.UNION,"common_define");
          }
        case 243: break;
        case 95: 
          { return symbol(sym.ASYNC,"common_define");
          }
        case 244: break;
        case 96: 
          { return symbol(sym.BREAK,"common_define");
          }
        case 245: break;
        case 97: 
          { return symbol(sym.EVENT,"common_define");
          }
        case 246: break;
        case 98: 
          { return symbol(sym.CONST,"type");
          }
        case 247: break;
        case 99: 
          { return symbol(sym.SHORT,"type");
          }
        case 248: break;
        case 100: 
          { return symbol(sym.WHILE,"common_define");
          }
        case 249: break;
        case 101: 
          { return symbol(sym.ATOMIC,"common_define");
          }
        case 250: break;
        case 102: 
          { return symbol(sym.RETURN,"common_define");
          }
        case 251: break;
        case 103: 
          { return symbol(sym.EXTERN,"type");
          }
        case 252: break;
        case 104: 
          { return symbol(sym.EXPORT,"type");
          }
        case 253: break;
        case 105: 
          { return symbol(sym.STATIC,"type");
          }
        case 254: break;
        case 106: 
          { return symbol(sym.STRUCT,"common_define");
          }
        case 255: break;
        case 107: 
          { return symbol(sym.SIGNAL,"common_define");
          }
        case 256: break;
        case 108: 
          { return symbol(sym.SIGNED,"type");
          }
        case 257: break;
        case 109: 
          { return symbol(sym.SIZEOF,"type");
          }
        case 258: break;
        case 110: 
          { return symbol(sym.SWITCH,"common_define");
          }
        case 259: break;
        case 111: 
          { return symbol(sym.NORACE,"common_define");
          }
        case 260: break;
        case 112: 
          { return symbol(sym.INLINE,"type");
          }
        case 261: break;
        case 113: 
          { return symbol(sym.INT8_T,"type");
          }
        case 262: break;
        case 114: 
          { return symbol(sym.DOUBLE,"type");
          }
        case 263: break;
        case 115: 
          { return symbol(sym.MODULE,"common_define");
          }
        case 264: break;
        case 116: 
          { return symbol(sym.UINT8_T,"type");
          }
        case 265: break;
        case 117: 
          { return symbol(sym.VIRTUAL,"common_define");
          }
        case 266: break;
        case 118: 
          { return symbol(sym.EXTENDS,"common_define");
          }
        case 267: break;
        case 119: 
          { return symbol(sym.ERROR_T,"type");
          }
        case 268: break;
        case 120: 
          { return symbol(sym.COMMAND,"common_define");
          }
        case 269: break;
        case 121: 
          { return symbol(sym.TYPEDEF,"common_define");
          }
        case 270: break;
        case 122: 
          { return symbol(sym.INT16_T,"type");
          }
        case 271: break;
        case 123: 
          { return symbol(sym.INT32_T,"type");
          }
        case 272: break;
        case 124: 
          { return symbol(sym.DEFAULT,"common_define");
          }
        case 273: break;
        case 125: 
          { return symbol(sym.GENERIC,"common_define");
          }
        case 274: break;
        case 126: 
          { return symbol(sym.UNSIGNED,"type");
          }
        case 275: break;
        case 127: 
          { return symbol(sym.UINT16_T,"type");
          }
        case 276: break;
        case 128: 
          { return symbol(sym.UINT32_T,"type");
          }
        case 277: break;
        case 129: 
          { return symbol(sym.VOLATILE,"common_define");
          }
        case 278: break;
        case 130: 
          { return symbol(sym.ABSTRACT,"common_define");
          }
        case 279: break;
        case 131: 
          { return symbol(sym.RESULT_T,"type");
          }
        case 280: break;
        case 132: 
          { return symbol(sym.EXPLICIT,"type");
          }
        case 281: break;
        case 133: 
          { return symbol(sym.CONTINUE,"common_define");
          }
        case 282: break;
        case 134: 
          { return symbol(sym.NX_UNION,"common_define");
          }
        case 283: break;
        case 135: 
          { return symbol(sym.TEMPLATE,"common_define");
          }
        case 284: break;
        case 136: 
          { return symbol(sym.TYPENAME,"common_define");
          }
        case 285: break;
        case 137: 
          { return symbol(sym.INCLUDES,"common_define");
          }
        case 286: break;
        case 138: 
          { return symbol(sym.INCLUDE,"common_define");
          }
        case 287: break;
        case 139: 
          { return symbol(sym.PACKET_T,"type");
          }
        case 288: break;
        case 140: 
          { return symbol(sym.PROVIDES,"common_define");
          }
        case 289: break;
        case 141: 
          { return symbol(sym.COMPONENT,"common_define");
          }
        case 290: break;
        case 142: 
          { return symbol(sym.NAMESPACE,"common_define");
          }
        case 291: break;
        case 143: 
          { return symbol(sym.NX_STRUCT,"common_define");
          }
        case 292: break;
        case 144: 
          { return symbol(sym.INTERFACE,"type");
          }
        case 293: break;
        case 145: 
          { return symbol(sym.MESSAGE_T,"type");
          }
        case 294: break;
        case 146: 
          { return symbol(sym.COMPONENTS,"common_define");
          }
        case 295: break;
        case 147: 
          { return symbol(sym.CONFIGURATION,"common_define");
          }
        case 296: break;
        case 148: 
          { return symbol(sym.ATTRIBUTE,"common_define");
          }
        case 297: break;
        case 149: 
          { return symbol(sym.IMPLEMENTATION,"common_define");
          }
        case 298: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
