/* The following code was generated by JFlex 1.6.0 */


/* --------------------------Codigo de Usuario----------------------- */
package code;

import java_cup.runtime.*;
import java.io.Reader;
import java_cup.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int BRACE = 4;
  public static final int PREPROCESSOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\17\1\20\1\1\16\13\4\0\1\3\1\75"+
    "\1\14\1\23\1\12\1\74\1\76\1\22\1\66\1\67\1\5\1\7"+
    "\1\72\1\61\1\10\1\4\1\6\1\54\1\57\1\56\2\6\1\55"+
    "\1\6\1\52\1\6\1\101\1\65\1\63\1\64\1\62\1\100\1\0"+
    "\4\12\1\11\25\12\1\73\1\16\1\103\1\77\1\53\1\0\1\42"+
    "\1\51\1\26\1\31\1\32\1\43\1\44\1\46\1\24\1\12\1\47"+
    "\1\27\1\40\1\25\1\36\1\34\1\12\1\35\1\33\1\41\1\30"+
    "\1\37\1\45\1\60\1\50\1\12\1\70\1\15\1\71\1\102\6\13"+
    "\1\21\32\13\2\0\4\12\4\0\1\12\2\0\1\13\7\0\1\12"+
    "\4\0\1\12\5\0\27\12\1\0\37\12\1\0\u01ca\12\4\0\14\12"+
    "\16\0\5\12\7\0\1\12\1\0\1\12\21\0\160\13\5\12\1\0"+
    "\2\12\2\0\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0"+
    "\24\12\1\0\123\12\1\0\213\12\1\0\5\13\2\0\236\12\11\0"+
    "\46\12\2\0\1\12\7\0\47\12\7\0\1\12\1\0\55\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\12\5\0"+
    "\3\12\15\0\5\13\6\0\1\12\4\0\13\13\5\0\53\12\37\13"+
    "\4\0\2\12\1\13\143\12\1\0\1\12\10\13\1\0\6\13\2\12"+
    "\2\13\1\0\4\13\2\12\12\13\3\12\2\0\1\12\17\0\1\13"+
    "\1\12\1\13\36\12\33\13\2\0\131\12\13\13\1\12\16\0\12\13"+
    "\41\12\11\13\2\12\4\0\1\12\5\0\26\12\4\13\1\12\11\13"+
    "\1\12\3\13\1\12\5\13\22\0\31\12\3\13\104\0\1\12\1\0"+
    "\13\12\67\0\33\13\1\0\4\13\66\12\3\13\1\12\22\13\1\12"+
    "\7\13\12\12\2\13\2\0\12\13\1\0\7\12\1\0\7\12\1\0"+
    "\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0"+
    "\3\13\1\12\10\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0"+
    "\12\13\4\12\7\0\1\12\5\0\3\13\1\0\6\12\4\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12"+
    "\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13"+
    "\7\0\4\12\1\0\1\12\7\0\14\13\3\12\1\13\13\0\3\13"+
    "\1\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12"+
    "\1\0\5\12\2\0\1\13\1\12\10\13\1\0\3\13\1\0\3\13"+
    "\2\0\1\12\17\0\2\12\2\13\2\0\12\13\1\0\1\12\17\0"+
    "\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0"+
    "\3\13\10\0\2\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13"+
    "\1\0\1\12\20\0\1\13\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\4\0\5\13\3\0\3\13\1\0\4\13\2\0"+
    "\1\12\6\0\1\13\16\0\12\13\11\0\1\12\7\0\3\13\1\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0"+
    "\1\12\7\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\12"+
    "\6\0\2\12\2\13\2\0\12\13\22\0\2\13\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0"+
    "\2\12\2\13\2\0\12\13\1\0\2\12\17\0\2\13\1\0\10\12"+
    "\1\0\3\12\1\0\51\12\2\0\1\12\7\13\1\0\3\13\1\0"+
    "\4\13\1\12\10\0\1\13\10\0\2\12\2\13\2\0\12\13\12\0"+
    "\6\12\2\0\2\13\1\0\22\12\3\0\30\12\1\0\11\12\1\0"+
    "\1\12\2\0\7\12\3\0\1\13\4\0\6\13\1\0\1\13\1\0"+
    "\10\13\22\0\2\13\15\0\60\12\1\13\2\12\7\13\4\0\10\12"+
    "\10\13\1\0\12\13\47\0\2\12\1\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0"+
    "\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\13\2\12\6\13"+
    "\1\0\2\13\1\12\2\0\5\12\1\0\1\12\1\0\6\13\2\0"+
    "\12\13\2\0\4\12\40\0\1\12\27\0\2\13\6\0\12\13\13\0"+
    "\1\13\1\0\1\13\1\0\1\13\4\0\2\13\10\12\1\0\44\12"+
    "\4\0\24\13\1\0\2\13\5\12\13\13\1\0\44\13\11\0\1\13"+
    "\71\0\53\12\24\13\1\12\12\13\6\0\6\12\4\13\4\12\3\13"+
    "\1\12\3\13\2\12\7\13\3\12\4\13\15\12\14\13\1\12\17\13"+
    "\2\0\46\12\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12"+
    "\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12"+
    "\2\0\3\13\40\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12"+
    "\1\0\32\12\5\0\113\12\3\0\3\12\17\0\15\12\1\0\4\12"+
    "\3\13\13\0\22\12\3\13\13\0\22\12\2\13\14\0\15\12\1\0"+
    "\3\12\1\0\2\13\14\0\64\12\40\13\3\0\1\12\3\0\2\12"+
    "\1\13\2\0\12\13\41\0\3\13\2\0\12\13\6\0\130\12\10\0"+
    "\51\12\1\13\1\12\5\0\106\12\12\0\35\12\3\0\14\13\4\0"+
    "\14\13\12\0\12\13\36\12\2\0\5\12\13\0\54\12\4\0\21\13"+
    "\7\12\2\13\6\0\12\13\46\0\27\12\5\13\4\0\65\12\12\13"+
    "\1\0\35\13\2\0\13\13\6\0\12\13\15\0\1\12\130\0\5\13"+
    "\57\12\21\13\7\12\4\0\12\13\21\0\11\13\14\0\3\13\36\12"+
    "\15\13\2\12\12\13\54\12\16\13\14\0\44\12\24\13\10\0\12\13"+
    "\3\0\3\12\12\13\44\12\122\0\3\13\1\0\25\13\4\12\1\13"+
    "\4\12\3\13\2\12\11\0\300\12\47\13\25\0\4\13\u0116\12\2\0"+
    "\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0"+
    "\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0"+
    "\15\12\5\0\3\12\1\0\7\12\16\0\5\13\30\0\1\17\1\17"+
    "\5\13\20\0\2\12\23\0\1\12\13\0\5\13\5\0\6\13\1\0"+
    "\1\12\15\0\1\12\20\0\15\12\3\0\33\12\25\0\15\13\4\0"+
    "\1\13\3\0\14\13\21\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\21\0"+
    "\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\13"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\17\0\1\13\27\12\11\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\40\13\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\13\1\0"+
    "\5\12\2\0\5\12\4\0\126\12\2\0\2\13\2\0\3\12\1\0"+
    "\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0"+
    "\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0"+
    "\u010d\12\3\0\20\12\12\13\2\12\24\0\57\12\1\13\4\0\12\13"+
    "\1\0\31\12\7\0\1\13\120\12\2\13\45\0\11\12\2\0\147\12"+
    "\2\0\4\12\1\0\4\12\14\0\13\12\115\0\12\12\1\13\3\12"+
    "\1\13\4\12\1\13\27\12\5\13\20\0\1\12\7\0\64\12\14\0"+
    "\2\13\62\12\21\13\13\0\12\13\6\0\22\13\6\12\3\0\1\12"+
    "\4\0\12\13\34\12\10\13\2\0\27\12\15\13\14\0\35\12\3\0"+
    "\4\13\57\12\16\13\16\0\1\12\12\13\46\0\51\12\16\13\11\0"+
    "\3\12\1\13\10\12\2\13\2\0\12\13\6\0\27\12\3\0\1\12"+
    "\1\13\4\0\60\12\1\13\1\12\3\13\2\12\2\13\5\12\2\13"+
    "\1\12\1\13\1\12\30\0\3\12\2\0\13\12\5\13\2\0\3\12"+
    "\2\13\12\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12\1\0"+
    "\7\12\221\0\43\12\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\12"+
    "\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\13\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\15\12\3\0\20\13\20\0\7\13"+
    "\14\0\2\12\30\0\3\12\31\0\1\12\6\0\5\12\1\0\207\12"+
    "\2\0\1\13\4\0\1\12\13\0\12\13\7\0\32\12\4\0\1\12"+
    "\1\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12"+
    "\2\0\3\12\3\0\2\12\3\0\2\12\22\0\3\13\4\0\14\12"+
    "\1\0\32\12\1\0\23\12\1\0\2\12\1\0\17\12\2\0\16\12"+
    "\42\0\173\12\105\0\65\12\210\0\1\13\202\0\35\12\3\0\61\12"+
    "\57\0\37\12\21\0\33\12\65\0\36\12\2\0\44\12\4\0\10\12"+
    "\1\0\5\12\52\0\236\12\2\0\12\13\u0356\0\6\12\2\0\1\12"+
    "\1\0\54\12\1\0\2\12\3\0\1\12\2\0\27\12\252\0\26\12"+
    "\12\0\32\12\106\0\70\12\6\0\2\12\100\0\1\12\3\13\1\0"+
    "\2\13\5\0\4\13\4\12\1\0\3\12\1\0\33\12\4\0\3\13"+
    "\4\0\1\13\40\0\35\12\203\0\66\12\12\0\26\12\12\0\23\12"+
    "\215\0\111\12\u03b7\0\3\13\65\12\17\13\37\0\12\13\20\0\3\13"+
    "\55\12\13\13\2\0\1\13\22\0\31\12\7\0\12\13\6\0\3\13"+
    "\44\12\16\13\1\0\12\13\100\0\3\13\60\12\16\13\4\12\13\0"+
    "\12\13\u04a6\0\53\12\15\13\10\0\12\13\u0936\0\u036f\12\221\0\143\12"+
    "\u0b9d\0\u042f\12\u33d1\0\u0239\12\u04c7\0\105\12\13\0\1\12\56\13\20\0"+
    "\4\13\15\12\u4060\0\2\12\u2163\0\5\13\3\0\26\13\2\0\7\13"+
    "\36\0\4\13\224\0\3\13\u01bb\0\125\12\1\0\107\12\1\0\2\12"+
    "\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12"+
    "\1\0\7\12\1\0\101\12\1\0\4\12\2\0\10\12\1\0\7\12"+
    "\1\0\34\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\7\12"+
    "\1\0\u0154\12\2\0\31\12\1\0\31\12\1\0\37\12\1\0\31\12"+
    "\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12"+
    "\1\0\31\12\1\0\10\12\2\0\62\13\u1600\0\4\12\1\0\33\12"+
    "\1\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12"+
    "\1\0\1\12\1\0\12\12\1\0\21\12\5\0\3\12\1\0\5\12"+
    "\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0\u021e\12"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\21\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\0\1\5\3\0\1\46\1\0\1\47\2\0"+
    "\2\10\1\50\10\10\1\51\24\10\1\52\7\10\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\2\70\2\0\1\5\1\0"+
    "\1\71\1\0\1\10\1\72\1\10\1\73\37\10\1\74"+
    "\5\10\1\0\1\70\1\0\13\10\1\75\1\76\2\10"+
    "\1\77\1\10\1\100\1\101\7\10\1\102\4\10\1\103"+
    "\3\10\1\104\1\105\1\106\3\10\1\107\2\10\1\110"+
    "\1\0\16\10\1\111\2\10\1\112\16\10\1\113\1\114"+
    "\1\115\1\0\1\116\1\10\1\117\16\10\1\120\1\121"+
    "\1\122\3\10\1\123\2\10\1\124\2\10\1\125\1\0"+
    "\1\10\1\126\1\127\5\10\1\130\1\131\2\10\1\132"+
    "\1\133\4\10\1\134\3\10\1\0\3\10\1\135\2\10"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\10\1\144"+
    "\1\145\1\146\1\147\1\10\1\150\1\10\1\151\1\152"+
    "\2\10\1\153\5\10\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0110\0\u0198"+
    "\0\u0110\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0990\0\u09d4"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0a18\0\u0110\0\u0a5c\0\u0110"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0264\0\u02ec\0\u0110\0\u0bb0\0\u0110\0\u0bf4\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u02a8\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\u02a8\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u02a8\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u1650\0\u0110\0\u1694"+
    "\0\u16d8\0\u171c\0\u171c\0\u0110\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u02a8\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u02a8\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u1694"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u02a8\0\u02a8\0\u2574\0\u25b8"+
    "\0\u02a8\0\u25fc\0\u02a8\0\u02a8\0\u2640\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u02a8\0\u281c\0\u2860\0\u28a4\0\u28e8"+
    "\0\u02a8\0\u292c\0\u2970\0\u29b4\0\u02a8\0\u02a8\0\u02a8\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u02a8\0\u2ac4\0\u2b08\0\u02a8\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u02a8\0\u2f48\0\u2f8c"+
    "\0\u02a8\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u02a8"+
    "\0\u02a8\0\u02a8\0\u3388\0\u02a8\0\u33cc\0\u02a8\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u02a8\0\u02a8\0\u02a8\0\u37c8"+
    "\0\u380c\0\u3850\0\u02a8\0\u3894\0\u38d8\0\u02a8\0\u391c\0\u3960"+
    "\0\u02a8\0\u39a4\0\u39e8\0\u02a8\0\u02a8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u02a8\0\u02a8\0\u3b80\0\u3bc4\0\u02a8\0\u02a8"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u02a8\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u02a8\0\u3ef4\0\u3f38\0\u02a8"+
    "\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u3f7c\0\u02a8\0\u02a8"+
    "\0\u0110\0\u02a8\0\u3fc0\0\u02a8\0\u4004\0\u4048\0\u02a8\0\u408c"+
    "\0\u40d0\0\u02a8\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u02a8"+
    "\0\u02a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\2\15\1\5\1\16\1\17\1\5\1\0\1\7\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\15\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\15\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\3\15\1\42\1\12\1\15"+
    "\4\12\1\15\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\5\1\65\1\0\1\5"+
    "\11\65\1\66\1\65\1\67\65\65\1\70\1\0\1\5"+
    "\14\70\3\0\51\70\1\71\7\70\1\72\1\5\1\0"+
    "\1\73\5\5\1\74\5\5\1\75\3\0\62\5\106\0"+
    "\1\7\105\0\1\76\1\77\104\0\1\12\1\0\1\100"+
    "\1\101\20\0\1\101\17\0\1\12\1\0\4\12\32\0"+
    "\1\12\1\0\1\102\41\0\1\12\1\0\4\12\32\0"+
    "\1\100\43\0\1\100\1\0\4\100\32\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\35\15\23\0\1\103\2\0"+
    "\11\103\1\104\1\0\1\105\65\103\15\0\1\106\66\0"+
    "\104\107\24\0\1\110\65\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\1\15\1\111\12\15\1\112\2\15\1\113"+
    "\15\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\6\15\1\114\7\15\1\115\16\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\12\15\1\116\3\15\1\117"+
    "\3\15\1\120\12\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\1\121\6\15\1\122\25\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\6\15\1\123\3\15"+
    "\1\124\22\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\125\1\15\1\126\5\15\1\127\1\15"+
    "\1\130\20\15\1\131\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\15\15\1\132\3\15\1\133\13\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\11\15\1\134"+
    "\1\135\3\15\1\136\16\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\6\15\1\137\26\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\1\140\11\15\1\141"+
    "\22\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\6\15\1\142\3\15\1\143\22\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\144\2\15\1\145"+
    "\4\15\1\146\3\15\1\147\1\15\1\150\10\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\7\15\1\151"+
    "\5\15\1\152\17\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\12\15\1\153\3\15\1\154\16\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\12\15\1\155"+
    "\22\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\22\15\1\156\12\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\11\15\1\157\1\160\22\15\31\0\1\12"+
    "\1\0\1\102\41\0\1\12\1\0\4\12\2\0\1\161"+
    "\103\0\1\162\1\0\1\163\100\0\1\164\1\0\1\165"+
    "\1\166\103\0\1\167\103\0\1\170\115\0\1\171\5\0"+
    "\1\65\2\0\11\65\1\0\1\65\1\0\65\65\14\0"+
    "\1\172\10\0\1\173\7\0\1\174\3\0\1\175\42\0"+
    "\1\76\1\176\1\177\101\76\5\200\1\201\76\200\6\0"+
    "\1\100\2\0\1\101\20\0\1\101\17\0\1\100\1\0"+
    "\4\100\32\0\1\202\1\203\42\0\1\202\1\0\4\202"+
    "\1\0\1\203\22\0\1\103\2\0\14\103\3\0\62\103"+
    "\22\0\1\204\106\0\1\205\64\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\3\15\1\206\11\15\1\207\17\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\10\15"+
    "\1\210\24\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\21\15\1\211\13\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\14\15\1\212\20\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\1\15\1\213\12\15"+
    "\1\214\20\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\7\15\1\215\25\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\16\15\1\216\16\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\1\15\1\217\33\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\1\220"+
    "\5\15\1\221\26\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\17\15\1\222\15\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\4\15\1\223\30\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\7\15\1\224"+
    "\25\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\11\15\1\225\23\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\6\15\1\226\26\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\10\15\1\227\24\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\11\15\1\230"+
    "\23\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\1\231\34\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\12\15\1\232\22\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\7\15\1\233\25\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\2\15\1\234\32\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\7\15"+
    "\1\235\5\15\1\236\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\11\15\1\237\23\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\1\240\34\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\7\15\1\241"+
    "\25\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\5\15\1\242\27\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\14\15\1\243\20\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\4\15\1\244\30\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\7\15\1\245"+
    "\25\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\1\246\34\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\10\15\1\247\24\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\12\15\1\250\22\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\11\15\1\251\23\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\3\15"+
    "\1\252\31\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\253\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\1\254\34\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\255\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\12\15\1\256"+
    "\22\15\25\0\1\177\101\0\5\200\1\257\102\200\1\260"+
    "\1\257\76\200\6\0\1\202\43\0\1\202\1\0\4\202"+
    "\52\0\1\261\63\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\262\34\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\6\15\1\263\17\15\1\264\1\15\1\265"+
    "\1\15\1\266\2\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\3\15\1\267\31\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\270\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\15\15\1\271"+
    "\1\15\1\272\15\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\10\15\1\273\3\15\1\274\20\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\6\15\1\275"+
    "\26\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\11\15\1\276\23\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\15\15\1\277\17\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\1\15\1\300\33\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\7\15\1\301"+
    "\25\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\16\15\1\302\16\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\14\15\1\303\20\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\304\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\12\15\1\305"+
    "\22\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\1\15\1\306\33\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\3\15\1\307\6\15\1\310\22\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\4\15\1\311"+
    "\30\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\15\15\1\312\17\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\13\15\1\313\21\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\15\15\1\314\17\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\23\15\1\315"+
    "\11\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\4\15\1\316\30\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\4\15\1\317\30\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\15\15\1\320\17\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\5\15\1\321"+
    "\27\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\7\15\1\322\25\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\4\15\1\323\30\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\10\15\1\324\24\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\6\15\1\325"+
    "\26\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\23\15\1\326\11\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\7\15\1\327\25\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\330\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\14\15\1\331"+
    "\20\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\7\15\1\332\25\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\12\15\1\333\22\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\3\15\1\334\31\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\16\15\1\335"+
    "\16\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\3\15\1\336\31\15\23\0\4\200\1\177\1\257\76\200"+
    "\27\0\1\337\62\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\340\33\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\11\15\1\341\23\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\27\15\1\342\5\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\31\15"+
    "\1\343\3\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\33\15\1\344\1\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\6\15\1\345\26\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\7\15\1\346\25\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\1\347"+
    "\34\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\1\350\34\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\12\15\1\351\22\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\16\15\1\352\16\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\26\15\1\353\1\15"+
    "\1\354\1\15\1\355\2\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\20\15\1\356\14\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\4\15\1\357\30\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\11\15"+
    "\1\360\23\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\361\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\1\362\34\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\11\15\1\363\23\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\2\15\1\364"+
    "\32\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\2\15\1\365\32\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\1\366\34\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\6\15\1\367\26\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\3\15\1\370\31\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\11\15"+
    "\1\371\23\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\4\15\1\372\30\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\16\15\1\373\16\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\3\15\1\374\31\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\3\15"+
    "\1\375\31\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\376\33\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\1\377\34\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\u0100\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\6\15\1\u0101"+
    "\26\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\23\15\1\u0102\11\15\53\0\1\u0103\61\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\6\15\1\u0104\26\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\17\15\1\u0105"+
    "\15\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\15\15\1\u0106\17\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\27\15\1\u0107\5\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\27\15\1\u0108\5\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\14\15\1\u0109"+
    "\20\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\10\15\1\u010a\24\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\1\15\1\u010b\33\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\20\15\1\u010c\14\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\1\15\1\u010d"+
    "\33\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\1\15\1\u010e\33\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\27\15\1\u010f\5\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\31\15\1\u0110\3\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\33\15\1\u0111"+
    "\1\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\3\15\1\u0112\31\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\27\15\1\u0113\5\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\2\15\1\u0114\32\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\15\15\1\u0115"+
    "\17\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\15\15\1\u0116\17\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\22\15\1\u0117\12\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\5\15\1\u0118\27\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\15\15\1\u0119"+
    "\17\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\15\15\1\u011a\17\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\1\15\1\u011b\33\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\16\15\1\u011c\16\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\20\15\1\u011d"+
    "\14\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\6\15\1\u011e\26\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\16\15\1\u011f\16\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\16\15\1\u0120\16\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\2\15\1\u0121"+
    "\32\15\54\0\1\u0122\60\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\16\15\1\u0123\16\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\15\15\1\u0124\17\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\15\15\1\u0125"+
    "\17\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\6\15\1\u0126\26\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\16\15\1\u0127\16\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\4\15\1\u0128\30\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\4\15\1\u0129"+
    "\30\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\6\15\1\u012a\26\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\5\15\1\u012b\27\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\15\15\1\u012c\17\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\27\15\1\u012d"+
    "\5\15\31\0\1\15\2\0\3\15\5\0\1\15\2\0"+
    "\27\15\1\u012e\5\15\31\0\1\15\2\0\3\15\5\0"+
    "\1\15\2\0\15\15\1\u012f\17\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\15\15\1\u0130\17\15\31\0"+
    "\1\15\2\0\3\15\5\0\1\15\2\0\1\u0131\34\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\6\15"+
    "\1\u0132\26\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\27\15\1\u0133\5\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\27\15\1\u0134\5\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\3\15\1\u0135\31\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\6\15"+
    "\1\u0136\26\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\u0137\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\14\15\1\u0138\20\15\55\0\1\u0139"+
    "\57\0\1\15\2\0\3\15\5\0\1\15\2\0\2\15"+
    "\1\u013a\32\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\u013b\33\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\2\15\1\u013c\32\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\6\15\1\u013d\26\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\11\15"+
    "\1\u013e\23\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\u013f\33\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\15\15\1\u0140\17\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\15\15\1\u0141\17\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\15\15"+
    "\1\u0142\17\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\7\15\1\u0143\25\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\15\15\1\u0144\17\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\15\15\1\u0145\17\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\27\15"+
    "\1\u0146\5\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\6\15\1\u0147\26\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\6\15\1\u0148\26\15\56\0\1\u0149"+
    "\56\0\1\15\2\0\3\15\5\0\1\15\2\0\6\15"+
    "\1\u014a\26\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\u014b\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\6\15\1\u014c\26\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\16\15\1\u014d\16\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\15\15"+
    "\1\u014e\17\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\u014f\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\16\15\1\u0150\16\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\15\15\1\u0151\17\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\7\15"+
    "\1\u0152\25\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\15\15\1\u0153\17\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\1\u0154\34\15\31\0\1\15\2\0"+
    "\3\15\5\0\1\15\2\0\1\u0155\34\15\31\0\1\15"+
    "\2\0\3\15\5\0\1\15\2\0\12\15\1\u0156\22\15"+
    "\31\0\1\15\2\0\3\15\5\0\1\15\2\0\12\15"+
    "\1\u0157\22\15\31\0\1\15\2\0\3\15\5\0\1\15"+
    "\2\0\1\15\1\u0158\33\15\31\0\1\15\2\0\3\15"+
    "\5\0\1\15\2\0\1\15\1\u0159\33\15\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\35\1\10\11"+
    "\2\1\4\11\1\1\1\11\1\1\6\11\2\0\1\1"+
    "\3\0\1\11\1\0\1\11\2\0\50\1\15\11\1\1"+
    "\1\11\2\0\1\1\1\0\1\11\1\0\51\1\1\0"+
    "\1\1\1\0\55\1\1\0\43\1\1\0\36\1\1\0"+
    "\26\1\1\0\17\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private StringBuffer string           = new StringBuffer();
    private StringBuffer preProcessorText = new StringBuffer();
    private boolean      preProcessorCont = false;
    private StringBuffer braceContent     = new StringBuffer();
    private int          braceCount       = 0; 
    private Triplet beforeToken = new Triplet(null,null,null);
    private String keywordClass;
    private String keyword;
    private ParserError lexerError = new ParserError();
public Triplet ignore = new Triplet(null,null,null);
    /*public Lexer(File filename) throws FileNotFoundException {
        this(new FileInputStream(filename));
    }*/

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    public ParserError getLexerError(){
        return this.lexerError;
    }
    public int yyline(){
        return this.yyline;
    }
    public String getKeywordClass(){
        return this.keywordClass;
    }
    public String getKeyword(){
        return this.keyword;
    }
    private Symbol symbol(int type, String keywordClass) {
	this.keyword = yytext();
	this.keywordClass = keywordClass;

	beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value,String keywordClass) {
	this.keyword = yytext();
	this.keywordClass = keywordClass;
	beforeToken = new Triplet(type,yytext(),yyline);
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2880) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { //return symbol(sym.error);

	this.lexerError.setLine(((int)beforeToken.get3())+1);
this.lexerError.setColumn(yycolumn);
	this.lexerError.setMessage("Illegal character <"+ beforeToken.get2() + yytext()+">");	
    throw new Error("Illegal character <"+ yytext()+">");
          }
        case 110: break;
        case 2: 
          { ignore = new Triplet(-2,yytext(),"");
	//return symbol(-2, yytext(),"WHITE_SPACE");
        /* ignore */
          }
        case 111: break;
        case 3: 
          { return symbol(sym.DIVIDE,"arithmetic_operator");
          }
        case 112: break;
        case 4: 
          { return symbol(sym.TIMES,"arithmetic_operator");
          }
        case 113: break;
        case 5: 
          { return symbol(sym.INTEGER, new Integer(yytext()),"Integer");
          }
        case 114: break;
        case 6: 
          { return symbol(sym.PLUS,"arithmetic_operator");
          }
        case 115: break;
        case 7: 
          { return symbol(sym.DOT,"keyword");
          }
        case 116: break;
        case 8: 
          { if(beforeToken.get1() == null || (int)beforeToken.get1() != sym.INTEGER )
            return symbol(sym.IDENTIFIER, yytext(),"ID");
	this.lexerError.setLine(((int)beforeToken.get3()));
	this.lexerError.setColumn(yycolumn);
	this.lexerError.setMessage("Illegal character <"+ beforeToken.get2() + yytext()+">");
	throw new Error("Illegal character <"+ beforeToken.get2() + yytext()+">");
          }
        case 117: break;
        case 9: 
          { string.setLength(0);
        yybegin(STRING);
          }
        case 118: break;
        case 10: 
          { return symbol(sym.BITWISE_OR,"bitwise_operator");
          }
        case 119: break;
        case 11: 
          { preProcessorText.setLength(0);
        preProcessorText.append(yytext());
        yybegin(PREPROCESSOR);
          }
        case 120: break;
        case 12: 
          { return symbol(sym.MINUS,"arithmetic_operator");
          }
        case 121: break;
        case 13: 
          { return symbol(sym.GREATER_THAN,"comparison_operator");
          }
        case 122: break;
        case 14: 
          { return symbol(sym.LESS_THAN,"comparison_operator");
          }
        case 123: break;
        case 15: 
          { return symbol(sym.EQUALS, yytext(),"operator");
          }
        case 124: break;
        case 16: 
          { return symbol(sym.SEMI_COLON,"end_expressions");
          }
        case 125: break;
        case 17: 
          { return symbol(sym.OPEN_PAREN,"function_call");
          }
        case 126: break;
        case 18: 
          { return symbol(sym.CLOSE_PAREN,"function_call");
          }
        case 127: break;
        case 19: 
          { return symbol(sym.OPEN_CURLY,"braces");
          }
        case 128: break;
        case 20: 
          { return symbol(sym.CLOSE_CURLY,"braces");
          }
        case 129: break;
        case 21: 
          { return symbol(sym.COMMA,"comma_operator");
          }
        case 130: break;
        case 22: 
          { braceCount++;
        if (braceCount == 1) {
            braceContent.setLength(0);
            yybegin(BRACE);
            return symbol(sym.OPEN_BRACE,"brace");
        }
          }
        case 131: break;
        case 23: 
          { return symbol(sym.NOT,"logical_operator");
          }
        case 132: break;
        case 24: 
          { return symbol(sym.BITWISE_AND,"bitwise_operator");
          }
        case 133: break;
        case 25: 
          { return symbol(sym.BITWISE_XOR,"bitwise_operator");
          }
        case 134: break;
        case 26: 
          { return symbol(sym.QUESTION,"keyword");
          }
        case 135: break;
        case 27: 
          { return symbol(sym.COLON,"keyword");
          }
        case 136: break;
        case 28: 
          { return symbol(sym.BITWISE_NOT,"bitwise_operator");
          }
        case 137: break;
        case 29: 
          { string.append( yytext() );
          }
        case 138: break;
        case 30: 
          { yybegin(YYINITIAL);
        return symbol(sym.STRING, string.toString(),"String");
          }
        case 139: break;
        case 31: 
          { string.append('\\');
          }
        case 140: break;
        case 32: 
          { braceContent.append(yytext());
          }
        case 141: break;
        case 33: 
          { braceContent.append(yytext());
        braceCount++;
          }
        case 142: break;
        case 34: 
          { --braceCount;
        if (braceCount == 0) {
            yybegin(YYINITIAL);
            return symbol(sym.CLOSE_BRACE, braceContent.toString(),"keyword");
        } else {
        braceContent.append(yytext());
        }
          }
        case 143: break;
        case 35: 
          { if (preProcessorCont) {
            preProcessorCont = false;
        } else {
            yybegin(YYINITIAL);
        }
        preProcessorText.append(yytext());
        return symbol(sym.PREPROCESSOR, preProcessorText.toString(),"keyword");
          }
        case 144: break;
        case 36: 
          { preProcessorText.append(yytext());
        preProcessorCont = false;
          }
        case 145: break;
        case 37: 
          { preProcessorCont = true;
        preProcessorText.append(yytext());
          }
        case 146: break;
        case 38: 
          { return symbol(sym.STRING, new String(yytext()),"String");
          }
        case 147: break;
        case 39: 
          { return symbol(sym.OR,"logical_operator");
          }
        case 148: break;
        case 40: 
          { return symbol(sym.IF,"common_define");
          }
        case 149: break;
        case 41: 
          { return symbol(sym.DO,"common_define");
          }
        case 150: break;
        case 42: 
          { return symbol(sym.AS,"common_define");
          }
        case 151: break;
        case 43: 
          { return symbol(sym.WIRES_TO, yytext(),"pointer_operator");
          }
        case 152: break;
        case 44: 
          { return symbol(sym.RSHIFT,"bitwise_operator");
          }
        case 153: break;
        case 45: 
          { return symbol(sym.GREATER_EQUAL_THAN,"comparison_operator");
          }
        case 154: break;
        case 46: 
          { return symbol(sym.WIRES_FROM, yytext(),"pointer_operator");
          }
        case 155: break;
        case 47: 
          { return symbol(sym.LSHIFT,"bitwise_operator");
          }
        case 156: break;
        case 48: 
          { return symbol(sym.LESS_EQUAL_THAN,"comparison_operator");
          }
        case 157: break;
        case 49: 
          { return symbol(sym.EQCOMPARE,"comparison");
          }
        case 158: break;
        case 50: 
          { return symbol(sym.EQNOT_EQUAL,"comparison_operator");
          }
        case 159: break;
        case 51: 
          { return symbol(sym.AND,"logical_operator");
          }
        case 160: break;
        case 52: 
          { string.append('\"');
          }
        case 161: break;
        case 53: 
          { string.append('\n');
          }
        case 162: break;
        case 54: 
          { string.append('\r');
          }
        case 163: break;
        case 55: 
          { string.append('\t');
          }
        case 164: break;
        case 56: 
          { ignore = new Triplet(-2, yytext(),"COMMENT");
	//return symbol(-2, yytext() ,"COMMENT");
        /* ignore */
          }
        case 165: break;
        case 57: 
          { return symbol(sym.CHARACTER, yytext(),"Character");
          }
        case 166: break;
        case 58: 
          { return symbol(sym.INT,"type");
          }
        case 167: break;
        case 59: 
          { return symbol(sym.NEW,"common_define");
          }
        case 168: break;
        case 60: 
          { return symbol(sym.FOR,"common_define");
          }
        case 169: break;
        case 61: 
          { return symbol(sym.CASE,"common_define");
          }
        case 170: break;
        case 62: 
          { return symbol(sym.CHAR,"type");
          }
        case 171: break;
        case 63: 
          { return symbol(sym.USES,"common_define");
          }
        case 172: break;
        case 64: 
          { return symbol(sym.ENUM,"type");
          }
        case 173: break;
        case 65: 
          { return symbol(sym.ELSE,"common_define");
          }
        case 174: break;
        case 66: 
          { return symbol(sym.POST,"common_define");
          }
        case 175: break;
        case 67: 
          { return symbol(sym.VOID,"type");
          }
        case 176: break;
        case 68: 
          { return symbol(sym.TRUE,"common_define");
          }
        case 177: break;
        case 69: 
          { return symbol(sym.TASK,"common_define");
          }
        case 178: break;
        case 70: 
          { return symbol(sym.THIS,"common_define");
          }
        case 179: break;
        case 71: 
          { return symbol(sym.GOTO,"common_define");
          }
        case 180: break;
        case 72: 
          { return symbol(sym.BOOL,"type");
          }
        case 181: break;
        case 73: 
          { return symbol(sym.USING,"common_define");
          }
        case 182: break;
        case 74: 
          { return symbol(sym.EVENT,"common_define");
          }
        case 183: break;
        case 75: 
          { return symbol(sym.FALSE,"common_define");
          }
        case 184: break;
        case 76: 
          { return symbol(sym.WHILE,"common_define");
          }
        case 185: break;
        case 77: 
          { return symbol(sym.BREAK,"common_define");
          }
        case 186: break;
        case 78: 
          { return symbol(sym.INLINE,"type");
          }
        case 187: break;
        case 79: 
          { return symbol(sym.INT8_T,"type");
          }
        case 188: break;
        case 80: 
          { return symbol(sym.EXPORT,"type");
          }
        case 189: break;
        case 81: 
          { return symbol(sym.STRUCT,"type");
          }
        case 190: break;
        case 82: 
          { return symbol(sym.SWITCH,"common_define");
          }
        case 191: break;
        case 83: 
          { return symbol(sym.RETURN,"common_define");
          }
        case 192: break;
        case 84: 
          { return symbol(sym.MODULE,"common_define");
          }
        case 193: break;
        case 85: 
          { return symbol(sym.ATOMIC,"common_define");
          }
        case 194: break;
        case 86: 
          { return symbol(sym.INT16_T,"type");
          }
        case 195: break;
        case 87: 
          { return symbol(sym.INT32_T,"type");
          }
        case 196: break;
        case 88: 
          { return symbol(sym.COMMAND,"common_define");
          }
        case 197: break;
        case 89: 
          { return symbol(sym.UINT8_T,"type");
          }
        case 198: break;
        case 90: 
          { return symbol(sym.DEFAULT,"common_define");
          }
        case 199: break;
        case 91: 
          { return symbol(sym.ERROR_T,"type");
          }
        case 200: break;
        case 92: 
          { return symbol(sym.VIRTUAL,"common_define");
          }
        case 201: break;
        case 93: 
          { return symbol(sym.CONTINUE,"common_define");
          }
        case 202: break;
        case 94: 
          { return symbol(sym.UINT16_T,"type");
          }
        case 203: break;
        case 95: 
          { return symbol(sym.UINT32_T,"type");
          }
        case 204: break;
        case 96: 
          { return symbol(sym.EXPLICIT,"type");
          }
        case 205: break;
        case 97: 
          { return symbol(sym.PROVIDES,"common_define");
          }
        case 206: break;
        case 98: 
          { return symbol(sym.PACKET_T,"type");
          }
        case 207: break;
        case 99: 
          { return symbol(sym.RESULT_T,"type");
          }
        case 208: break;
        case 100: 
          { return symbol(sym.TEMPLATE,"common_define");
          }
        case 209: break;
        case 101: 
          { return symbol(sym.TYPENAME,"common_define");
          }
        case 210: break;
        case 102: 
          { /**/
        return symbol(sym.INCLUDES,"common_define");
          }
        case 211: break;
        case 103: 
          { return symbol(sym.INTERFACE,"common_define");
          }
        case 212: break;
        case 104: 
          { return symbol(sym.NAMESPACE,"common_define");
          }
        case 213: break;
        case 105: 
          { return symbol(sym.COMPONENT,"common_define");
          }
        case 214: break;
        case 106: 
          { return symbol(sym.MESSAGE_T,"type");
          }
        case 215: break;
        case 107: 
          { return symbol(sym.COMPONENTS,"common_define");
          }
        case 216: break;
        case 108: 
          { return symbol(sym.CONFIGURATION,"common_define");
          }
        case 217: break;
        case 109: 
          { return symbol(sym.IMPLEMENTATION,"common_define");
          }
        case 218: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
