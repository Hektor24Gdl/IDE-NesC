action=Avrora accepts the "action" option that you can use to select from the available functionality that Avrora provides.\nThis action might be to assemble the file, print a listing, perform a simulation, or run an analysis tool.\nThis flexibility allows this single frontend to select from multiple useful tools.\nThe currently supported actions are given below.\n\
    analyze-stack\n\n\
        The "analyze-stack" option invokes the built-in stack analysis\n\
        tool on the specified program. It uses an abstract\n\
        interpretation of the program to determine the possible\n\
        interrupt masks at each program point and determines the\n\
        worst-case stack depth in the presence of interrupts.\n\n\
    cfg\n\n\
        The "cfg" action builds and displays a control flow graph of\n\
        the given input program. This is useful for better program\n\
        understanding and for optimizations. The graph can be\n\
        outputted in a textual format, or the format supported by the\n\
        "dot" graph tool.\n\n\
    disassemble\n\n\
        The "disassemble" action disassembles a binary file into\n\
        source level instructions.\n\n\
    elf-dump\n\n\
        The "elf-dump" action loads an ELF executable and produces a\n\
        listing of many important pieces of information, including the\n\
        architecture, sections, symbol tables and sizes of various\n\
        structures.\n\n\
    gui\n\n\
        The "gui" action launches a GUI allowing the user to\n\
        interactively create simulations, complete with graphical\n\
        monitors.\n\n\
    isea\n\n\
        This action invokes the inter-procedural side-effect analysis\n\
        tool.\n\n\
    odpp\n\n\
        The "odpp" action tests the functionality of the objdump\n\
        preprocessor that cleans up the output of objdump into\n\
        something more suitable for automated parsing.\n\n\
    simulate\n\n\
        The "simulate" action creates a simulation with the specified\n\
        program(s) for the specified node(s). The simulation type\n\
        might be as simple as a single node with a single program, or\n\
        a multiple-node sensor network simulation or robotics\n\
        simulation.\n\n\
    test\n\n\
        The "test" action invokes the internal automated testing\n\
        framework that runs test cases supplied at the command line.\n\
        The test cases are used in regressions for diagnosing bugs.\n\n
banner=This option is used to enable or disable the printing of the banner
colors=This option is used to enable or disable the terminal colors
html=For terminal colors. Display terminal colors as HTML tags for easier inclusion in webpages
input=The input format of the program is used by actions that\n\
operate on programs to determine how to interpret the input and build a\n\
program from the files specified. For example, the input format might be Atmel\n\
syntax, GAS syntax, or the output of a disassembler such as avr-objdump.\n\
Currently no binary formats are supported.\n\n\
    atmel\n\n\
        The "atmel" input format reads programs that are written in\n\
        assembly language in the format supported by the Atmel\n\
        assembler. Nearly all of the directives are supported, except\n\
        macros.\n\n\
    auto\n\n\
        The "auto" input format reads a program from a single file at\n\
        a time. It uses the extension of the filename as a clue to\n\
        decide what input reader to use for that file. For example, an\n\
        extension of ".asm" is considered to be a program in Atmel\n\
        assembly syntax.\n\n\
    elf\n\n\
        The "elf" format loader reads a program from an ELF\n\
        (Executable and Linkable Format) as a binary and disassembles\n\
        the sections corresponding to executable code.\n\n\
    objdump\n\n\
        The "objdump" input format reads programs that are the output\n\
        of the "avr-objdump" utility provided with avr-binutils. For\n\
        example, an ELF file must first be disassembled with\n\
        "avr-objdump -zhD" to create a text file readable by this\n\
        input format. The "-zhD" options are very important: the\n\
        output will not be parseable otherwise.\n\n\
    odpp\n\n\
        The "odpp" input format reads programs that are the output of\n\
        the "avr-objdump" utility provided with avr-binutils and that\n\
        have been preprocessed with Avrora's preprocessor utility.\n\n\
    raw\n\n\
        The "raw" program format reader reads programs that consist of\n\
        small records of bytes and instructions.\n
license=Display the detailed copyright and license text
status=This option enables and disables printing of status information, for example when the simulator is loading a program
verbose=This option allows users to enable verbose printing of individual subsystems within Avrora. A list can be given with individual items separated by commas. For example: -verbose=loader,atmel.flash
monitors=Avrora's simulator offers the ability to install execution monitors that instrument the program in order to study and analyze its behavior
platform=
topology=
noise=
update-node-id=
stagger-start=
report-seconds=
real-time=
seconds-precision=
seconds=
simulation=
nodecount=
config-file=

#Short version
action_short=This option selects the action to perform
banner_short=This option is used to enable or disable the printing of the banner
colors_short=This option is used to enable or disable the terminal colors
html_short=Display terminal colors as HTML tags for easier inclusion in webpages
input_short=This option selects among the available program formats as input to Avrora
license_short=Display the detailed copyright and license text
status_short=This option enables and disables printing of status information
verbose_short=This option allows users to enable verbose printing of individual subsystems within Avrora
monitors_short=This option install execution monitors
platform_short=
topology_short=
noise_short=
update-node-id_short=
stagger-start_short=
report-seconds_short=
real-time_short=
seconds-precision_short=
seconds_short=
simulation_short=
nodecount_short=
config-file_short=